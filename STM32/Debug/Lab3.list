
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003ce0  08003ce0  00013ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d48  08003d48  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  08003d48  08003d48  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d48  08003d48  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d48  08003d48  00013d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d4c  08003d4c  00013d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08003d50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  200000b8  08003e08  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08003e08  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aefc  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  0002afdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002cdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  0002d7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001770f  00000000  00000000  0002e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb20  00000000  00000000  000457ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085f9b  00000000  00000000  0005130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d72aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b84  00000000  00000000  000d7300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	08003cc4 	.word	0x08003cc4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	08003cc4 	.word	0x08003cc4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <buttonPressed>:
			}
		}
	}
}

int buttonPressed(int index) {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	if (index < 0 || index >= BUTTON_NUMBER) return 0;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	db02      	blt.n	8000a8c <buttonPressed+0x14>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	dd01      	ble.n	8000a90 <buttonPressed+0x18>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e00d      	b.n	8000aac <buttonPressed+0x34>
	if (buttonFlags[index] == 1) {
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <buttonPressed+0x40>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d106      	bne.n	8000aaa <buttonPressed+0x32>
		buttonFlags[index] = 0;
 8000a9c:	4a06      	ldr	r2, [pc, #24]	; (8000ab8 <buttonPressed+0x40>)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
		return 1;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e000      	b.n	8000aac <buttonPressed+0x34>
	}
	return 0;
 8000aaa:	2300      	movs	r3, #0
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000d4 	.word	0x200000d4

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac0:	f000 fe86 	bl	80017d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac4:	f000 f812 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac8:	f000 f898 	bl	8000bfc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000acc:	f000 f84a 	bl	8000b64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (&htim2);
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <main+0x2c>)
 8000ad2:	f001 fdab 	bl	800262c <HAL_TIM_Base_Start_IT>
  led7segInit();
 8000ad6:	f000 fa0b 	bl	8000ef0 <led7segInit>
  fsmInit();
 8000ada:	f000 fb31 	bl	8001140 <fsmInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led7segScanning();
 8000ade:	f000 fa2f 	bl	8000f40 <led7segScanning>
	  fsmProcessing();
 8000ae2:	f000 fbc9 	bl	8001278 <fsmProcessing>
	  led7segScanning();
 8000ae6:	e7fa      	b.n	8000ade <main+0x22>
 8000ae8:	20000100 	.word	0x20000100

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b090      	sub	sp, #64	; 0x40
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0318 	add.w	r3, r7, #24
 8000af6:	2228      	movs	r2, #40	; 0x28
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 f94c 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b16:	2310      	movs	r3, #16
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f956 	bl	8001dd4 <HAL_RCC_OscConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b2e:	f000 f8e1 	bl	8000cf4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b32:	230f      	movs	r3, #15
 8000b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 fbc2 	bl	80022d4 <HAL_RCC_ClockConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b56:	f000 f8cd 	bl	8000cf4 <Error_Handler>
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	3740      	adds	r7, #64	; 0x40
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b78:	463b      	mov	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b8a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b96:	4b18      	ldr	r3, [pc, #96]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b98:	2209      	movs	r2, #9
 8000b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ba8:	4813      	ldr	r0, [pc, #76]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000baa:	f001 fcef 	bl	800258c <HAL_TIM_Base_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000bb4:	f000 f89e 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	480c      	ldr	r0, [pc, #48]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000bc6:	f001 fe6d 	bl	80028a4 <HAL_TIM_ConfigClockSource>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000bd0:	f000 f890 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	4619      	mov	r1, r3
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <MX_TIM2_Init+0x94>)
 8000be2:	f002 f845 	bl	8002c70 <HAL_TIMEx_MasterConfigSynchronization>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bec:	f000 f882 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000100 	.word	0x20000100

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c10:	4b30      	ldr	r3, [pc, #192]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c12:	699b      	ldr	r3, [r3, #24]
 8000c14:	4a2f      	ldr	r2, [pc, #188]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c16:	f043 0308 	orr.w	r3, r3, #8
 8000c1a:	6193      	str	r3, [r2, #24]
 8000c1c:	4b2d      	ldr	r3, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f003 0308 	and.w	r3, r3, #8
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b2a      	ldr	r3, [pc, #168]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	4a29      	ldr	r2, [pc, #164]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c2e:	f043 0304 	orr.w	r3, r3, #4
 8000c32:	6193      	str	r3, [r2, #24]
 8000c34:	4b27      	ldr	r3, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TRAFFIC0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_AMBER_Pin|TRAFFIC1_GREEN_Pin
 8000c40:	2200      	movs	r2, #0
 8000c42:	f643 71f0 	movw	r1, #16368	; 0x3ff0
 8000c46:	4824      	ldr	r0, [pc, #144]	; (8000cd8 <MX_GPIO_Init+0xdc>)
 8000c48:	f001 f8ac 	bl	8001da4 <HAL_GPIO_WritePin>
                          |LED7SEG_0_Pin|LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin
                          |TRAFFIC0_RED_Pin|TRAFFIC0_AMBER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED7SEG_A_Pin|LED7SEG_B_Pin|LED7SEG_C_Pin|LED7SEG_D_Pin
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000c52:	4822      	ldr	r0, [pc, #136]	; (8000cdc <MX_GPIO_Init+0xe0>)
 8000c54:	f001 f8a6 	bl	8001da4 <HAL_GPIO_WritePin>
                          |LED7SEG_E_Pin|LED7SEG_F_Pin|LED7SEG_G_Pin|LED7SEG_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481b      	ldr	r0, [pc, #108]	; (8000cd8 <MX_GPIO_Init+0xdc>)
 8000c6c:	f000 ff20 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRAFFIC0_GREEN_Pin TRAFFIC1_RED_Pin TRAFFIC1_AMBER_Pin TRAFFIC1_GREEN_Pin
                           LED7SEG_0_Pin LED7SEG_1_Pin LED7SEG_2_Pin LED7SEG_3_Pin
                           TRAFFIC0_RED_Pin TRAFFIC0_AMBER_Pin */
  GPIO_InitStruct.Pin = TRAFFIC0_GREEN_Pin|TRAFFIC1_RED_Pin|TRAFFIC1_AMBER_Pin|TRAFFIC1_GREEN_Pin
 8000c70:	f643 73f0 	movw	r3, #16368	; 0x3ff0
 8000c74:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_0_Pin|LED7SEG_1_Pin|LED7SEG_2_Pin|LED7SEG_3_Pin
                          |TRAFFIC0_RED_Pin|TRAFFIC0_AMBER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c82:	f107 0308 	add.w	r3, r7, #8
 8000c86:	4619      	mov	r1, r3
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_GPIO_Init+0xdc>)
 8000c8a:	f000 ff11 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7SEG_A_Pin LED7SEG_B_Pin LED7SEG_C_Pin LED7SEG_E_Pin
                           LED7SEG_F_Pin LED7SEG_G_Pin LED7SEG_DP_Pin */
  GPIO_InitStruct.Pin = LED7SEG_A_Pin|LED7SEG_B_Pin|LED7SEG_C_Pin|LED7SEG_E_Pin
 8000c8e:	f44f 4377 	mov.w	r3, #63232	; 0xf700
 8000c92:	60bb      	str	r3, [r7, #8]
                          |LED7SEG_F_Pin|LED7SEG_G_Pin|LED7SEG_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_GPIO_Init+0xe0>)
 8000ca8:	f000 ff02 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED7SEG_D_Pin */
  GPIO_InitStruct.Pin = LED7SEG_D_Pin;
 8000cac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED7SEG_D_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	f107 0308 	add.w	r3, r7, #8
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_GPIO_Init+0xe0>)
 8000cc6:	f000 fef3 	bl	8001ab0 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40021000 	.word	0x40021000
 8000cd8:	40010c00 	.word	0x40010c00
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ce8:	f000 fc8a 	bl	8001600 <timerRun>
}
 8000cec:	bf00      	nop
 8000cee:	3708      	adds	r7, #8
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <led7segDisplay>:
static uint16_t led7segPins[LED7SEG_NUMBER] = {LED7SEG_0_Pin, LED7SEG_1_Pin, LED7SEG_2_Pin, LED7SEG_3_Pin};

static uint16_t led7segNum0s[11] = {0xBF, 0x86, 0xDB, 0xCF, 0xE6, 0xED, 0xFD, 0x87, 0xFF, 0xEF, 0x00};
static uint16_t led7segNum1s[11] = {0x40, 0x79, 0x24, 0x30, 0x19, 0x12, 0x02, 0x78, 0x00, 0x10, 0xFF};

static void led7segDisplay(int index, int offset) {
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
	if (index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f2c0 80d7 	blt.w	8000ec0 <led7segDisplay+0x1c0>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	f300 80d3 	bgt.w	8000ec0 <led7segDisplay+0x1c0>
	if (offset < 0 || offset >= LED7SEG_DIGIT_NUMBER) return;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f2c0 80d1 	blt.w	8000ec4 <led7segDisplay+0x1c4>
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	f300 80cd 	bgt.w	8000ec4 <led7segDisplay+0x1c4>
	int num = led7segNumbers[index] / (int)pow(10, LED7SEG_DIGIT_NUMBER - offset - 1) % 10;
 8000d2a:	4a69      	ldr	r2, [pc, #420]	; (8000ed0 <led7segDisplay+0x1d0>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	f1c3 0301 	rsb	r3, r3, #1
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fb5b 	bl	80003f4 <__aeabi_i2d>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	4963      	ldr	r1, [pc, #396]	; (8000ed4 <led7segDisplay+0x1d4>)
 8000d48:	f002 f82e 	bl	8002da8 <pow>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4610      	mov	r0, r2
 8000d52:	4619      	mov	r1, r3
 8000d54:	f7ff fe68 	bl	8000a28 <__aeabi_d2iz>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	fb94 f2f3 	sdiv	r2, r4, r3
 8000d5e:	4b5e      	ldr	r3, [pc, #376]	; (8000ed8 <led7segDisplay+0x1d8>)
 8000d60:	fb83 1302 	smull	r1, r3, r3, r2
 8000d64:	1099      	asrs	r1, r3, #2
 8000d66:	17d3      	asrs	r3, r2, #31
 8000d68:	1ac9      	subs	r1, r1, r3
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	009b      	lsls	r3, r3, #2
 8000d6e:	440b      	add	r3, r1
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	60fb      	str	r3, [r7, #12]
	if (num >= 0 && num <= 9) {
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	db11      	blt.n	8000da0 <led7segDisplay+0xa0>
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2b09      	cmp	r3, #9
 8000d80:	dc0e      	bgt.n	8000da0 <led7segDisplay+0xa0>
		GPIOA->BSRR = led7segNum1s[num] << 8;
 8000d82:	4a56      	ldr	r2, [pc, #344]	; (8000edc <led7segDisplay+0x1dc>)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d8a:	021a      	lsls	r2, r3, #8
 8000d8c:	4b54      	ldr	r3, [pc, #336]	; (8000ee0 <led7segDisplay+0x1e0>)
 8000d8e:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = led7segNum0s[num] << (8 + 16);
 8000d90:	4a54      	ldr	r2, [pc, #336]	; (8000ee4 <led7segDisplay+0x1e4>)
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d98:	061a      	lsls	r2, r3, #24
 8000d9a:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <led7segDisplay+0x1e0>)
 8000d9c:	611a      	str	r2, [r3, #16]
 8000d9e:	e009      	b.n	8000db4 <led7segDisplay+0xb4>
	}
	else {
		GPIOA->BSRR = led7segNum1s[10] << 8;
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <led7segDisplay+0x1dc>)
 8000da2:	8a9b      	ldrh	r3, [r3, #20]
 8000da4:	021a      	lsls	r2, r3, #8
 8000da6:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <led7segDisplay+0x1e0>)
 8000da8:	611a      	str	r2, [r3, #16]
		GPIOA->BSRR = led7segNum0s[10] << (8 + 16);
 8000daa:	4b4e      	ldr	r3, [pc, #312]	; (8000ee4 <led7segDisplay+0x1e4>)
 8000dac:	8a9b      	ldrh	r3, [r3, #20]
 8000dae:	061a      	lsls	r2, r3, #24
 8000db0:	4b4b      	ldr	r3, [pc, #300]	; (8000ee0 <led7segDisplay+0x1e0>)
 8000db2:	611a      	str	r2, [r3, #16]
	}
	switch (index * LED7SEG_BLOCK_NUMBER + offset) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	005a      	lsls	r2, r3, #1
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	f200 8083 	bhi.w	8000ec8 <led7segDisplay+0x1c8>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <led7segDisplay+0xc8>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000dd9 	.word	0x08000dd9
 8000dcc:	08000e13 	.word	0x08000e13
 8000dd0:	08000e4d 	.word	0x08000e4d
 8000dd4:	08000e87 	.word	0x08000e87
	case 0:
		HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_RESET);
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	4619      	mov	r1, r3
 8000de0:	4842      	ldr	r0, [pc, #264]	; (8000eec <led7segDisplay+0x1ec>)
 8000de2:	f000 ffdf 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8000de6:	4b40      	ldr	r3, [pc, #256]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	2201      	movs	r2, #1
 8000dec:	4619      	mov	r1, r3
 8000dee:	483f      	ldr	r0, [pc, #252]	; (8000eec <led7segDisplay+0x1ec>)
 8000df0:	f000 ffd8 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8000df4:	4b3c      	ldr	r3, [pc, #240]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000df6:	889b      	ldrh	r3, [r3, #4]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	483b      	ldr	r0, [pc, #236]	; (8000eec <led7segDisplay+0x1ec>)
 8000dfe:	f000 ffd1 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 8000e02:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e04:	88db      	ldrh	r3, [r3, #6]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4838      	ldr	r0, [pc, #224]	; (8000eec <led7segDisplay+0x1ec>)
 8000e0c:	f000 ffca 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 8000e10:	e05b      	b.n	8000eca <led7segDisplay+0x1ca>
	case 1:
		HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	2201      	movs	r2, #1
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4834      	ldr	r0, [pc, #208]	; (8000eec <led7segDisplay+0x1ec>)
 8000e1c:	f000 ffc2 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_RESET);
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e22:	885b      	ldrh	r3, [r3, #2]
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	4830      	ldr	r0, [pc, #192]	; (8000eec <led7segDisplay+0x1ec>)
 8000e2a:	f000 ffbb 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e30:	889b      	ldrh	r3, [r3, #4]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	482d      	ldr	r0, [pc, #180]	; (8000eec <led7segDisplay+0x1ec>)
 8000e38:	f000 ffb4 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e3e:	88db      	ldrh	r3, [r3, #6]
 8000e40:	2201      	movs	r2, #1
 8000e42:	4619      	mov	r1, r3
 8000e44:	4829      	ldr	r0, [pc, #164]	; (8000eec <led7segDisplay+0x1ec>)
 8000e46:	f000 ffad 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 8000e4a:	e03e      	b.n	8000eca <led7segDisplay+0x1ca>
	case 2:
		HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	4825      	ldr	r0, [pc, #148]	; (8000eec <led7segDisplay+0x1ec>)
 8000e56:	f000 ffa5 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	4619      	mov	r1, r3
 8000e62:	4822      	ldr	r0, [pc, #136]	; (8000eec <led7segDisplay+0x1ec>)
 8000e64:	f000 ff9e 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_RESET);
 8000e68:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e6a:	889b      	ldrh	r3, [r3, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481e      	ldr	r0, [pc, #120]	; (8000eec <led7segDisplay+0x1ec>)
 8000e72:	f000 ff97 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e78:	88db      	ldrh	r3, [r3, #6]
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481b      	ldr	r0, [pc, #108]	; (8000eec <led7segDisplay+0x1ec>)
 8000e80:	f000 ff90 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 8000e84:	e021      	b.n	8000eca <led7segDisplay+0x1ca>
	case 3:
		HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 8000e86:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4817      	ldr	r0, [pc, #92]	; (8000eec <led7segDisplay+0x1ec>)
 8000e90:	f000 ff88 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4813      	ldr	r0, [pc, #76]	; (8000eec <led7segDisplay+0x1ec>)
 8000e9e:	f000 ff81 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000ea4:	889b      	ldrh	r3, [r3, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4810      	ldr	r0, [pc, #64]	; (8000eec <led7segDisplay+0x1ec>)
 8000eac:	f000 ff7a 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_RESET);
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <led7segDisplay+0x1e8>)
 8000eb2:	88db      	ldrh	r3, [r3, #6]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <led7segDisplay+0x1ec>)
 8000eba:	f000 ff73 	bl	8001da4 <HAL_GPIO_WritePin>
		break;
 8000ebe:	e004      	b.n	8000eca <led7segDisplay+0x1ca>
	if (index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
 8000ec0:	bf00      	nop
 8000ec2:	e002      	b.n	8000eca <led7segDisplay+0x1ca>
	if (offset < 0 || offset >= LED7SEG_DIGIT_NUMBER) return;
 8000ec4:	bf00      	nop
 8000ec6:	e000      	b.n	8000eca <led7segDisplay+0x1ca>
	default:
		break;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	3714      	adds	r7, #20
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	200000d8 	.word	0x200000d8
 8000ed4:	40240000 	.word	0x40240000
 8000ed8:	66666667 	.word	0x66666667
 8000edc:	20000020 	.word	0x20000020
 8000ee0:	40010800 	.word	0x40010800
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000000 	.word	0x20000000
 8000eec:	40010c00 	.word	0x40010c00

08000ef0 <led7segInit>:

void led7segInit(void) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	timerSet(LED7SEG_SCANNING_DURATION / TIMER_DURATION, 0);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	2019      	movs	r0, #25
 8000ef8:	f000 fb62 	bl	80015c0 <timerSet>
	HAL_GPIO_WritePin(GPIOB, led7segPins[0], GPIO_PIN_SET);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <led7segInit+0x48>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2201      	movs	r2, #1
 8000f02:	4619      	mov	r1, r3
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <led7segInit+0x4c>)
 8000f06:	f000 ff4d 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led7segPins[1], GPIO_PIN_SET);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <led7segInit+0x48>)
 8000f0c:	885b      	ldrh	r3, [r3, #2]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	4619      	mov	r1, r3
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <led7segInit+0x4c>)
 8000f14:	f000 ff46 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led7segPins[2], GPIO_PIN_SET);
 8000f18:	4b07      	ldr	r3, [pc, #28]	; (8000f38 <led7segInit+0x48>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <led7segInit+0x4c>)
 8000f22:	f000 ff3f 	bl	8001da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, led7segPins[3], GPIO_PIN_SET);
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <led7segInit+0x48>)
 8000f28:	88db      	ldrh	r3, [r3, #6]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4803      	ldr	r0, [pc, #12]	; (8000f3c <led7segInit+0x4c>)
 8000f30:	f000 ff38 	bl	8001da4 <HAL_GPIO_WritePin>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000000 	.word	0x20000000
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <led7segScanning>:
void led7segUpdate(int num, int index) {
	if (num < 0 || num >= pow(10, LED7SEG_DIGIT_NUMBER) || index < 0 || index >= LED7SEG_BLOCK_NUMBER) return;
	led7segNumbers[index] = num;
}

void led7segScanning(void) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	led7segDisplay(led7segIndex, led7segOffset);
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <led7segScanning+0x58>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <led7segScanning+0x5c>)
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff fed6 	bl	8000d00 <led7segDisplay>
	if (timerFlags[0] == 1) {
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <led7segScanning+0x60>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d11b      	bne.n	8000f94 <led7segScanning+0x54>
		timerSet(LED7SEG_SCANNING_DURATION / TIMER_DURATION, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2019      	movs	r0, #25
 8000f60:	f000 fb2e 	bl	80015c0 <timerSet>
		led7segOffset ++;
 8000f64:	4b0d      	ldr	r3, [pc, #52]	; (8000f9c <led7segScanning+0x5c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a0c      	ldr	r2, [pc, #48]	; (8000f9c <led7segScanning+0x5c>)
 8000f6c:	6013      	str	r3, [r2, #0]
		if (led7segOffset >= LED7SEG_DIGIT_NUMBER) {
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <led7segScanning+0x5c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	dd07      	ble.n	8000f86 <led7segScanning+0x46>
			led7segOffset = 0;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <led7segScanning+0x5c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
			led7segIndex ++;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <led7segScanning+0x58>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3301      	adds	r3, #1
 8000f82:	4a05      	ldr	r2, [pc, #20]	; (8000f98 <led7segScanning+0x58>)
 8000f84:	6013      	str	r3, [r2, #0]
		}
		if (led7segIndex >= LED7SEG_BLOCK_NUMBER) {
 8000f86:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <led7segScanning+0x58>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	dd02      	ble.n	8000f94 <led7segScanning+0x54>
			led7segIndex = 0;
 8000f8e:	4b02      	ldr	r3, [pc, #8]	; (8000f98 <led7segScanning+0x58>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	200000e0 	.word	0x200000e0
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	20000148 	.word	0x20000148

08000fa4 <trafficInit>:

static uint16_t trafficRedPins[TRAFFIC_NUMBER] = {TRAFFIC0_RED_Pin, TRAFFIC1_RED_Pin};
static uint16_t trafficAmberPins[TRAFFIC_NUMBER] = {TRAFFIC0_AMBER_Pin, TRAFFIC1_AMBER_Pin};
static uint16_t trafficGreenPins[TRAFFIC_NUMBER] = {TRAFFIC0_GREEN_Pin, TRAFFIC1_GREEN_Pin};

void trafficInit(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	trafficRedDuration = 5;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <trafficInit+0x2c>)
 8000faa:	2205      	movs	r2, #5
 8000fac:	601a      	str	r2, [r3, #0]
	trafficAmberDuration = 2;
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <trafficInit+0x30>)
 8000fb0:	2202      	movs	r2, #2
 8000fb2:	601a      	str	r2, [r3, #0]
	trafficGreenDuration = 3;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <trafficInit+0x34>)
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	601a      	str	r2, [r3, #0]
	trafficReInit(TRAFFIC_OFF, 0);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	2000      	movs	r0, #0
 8000fbe:	f000 f80d 	bl	8000fdc <trafficReInit>
	trafficReInit(TRAFFIC_OFF, 1);
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f000 f809 	bl	8000fdc <trafficReInit>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200000e8 	.word	0x200000e8
 8000fd4:	200000ec 	.word	0x200000ec
 8000fd8:	200000f0 	.word	0x200000f0

08000fdc <trafficReInit>:

void trafficReInit(enum TRAFFIC_STATE state, int index) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
	if (index < 0 || index >= TRAFFIC_NUMBER) return;
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f2c0 8098 	blt.w	8001120 <trafficReInit+0x144>
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	f300 8094 	bgt.w	8001120 <trafficReInit+0x144>
	switch (state) {
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	f200 8092 	bhi.w	8001124 <trafficReInit+0x148>
 8001000:	a201      	add	r2, pc, #4	; (adr r2, 8001008 <trafficReInit+0x2c>)
 8001002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001006:	bf00      	nop
 8001008:	08001019 	.word	0x08001019
 800100c:	0800105b 	.word	0x0800105b
 8001010:	0800109d 	.word	0x0800109d
 8001014:	080010df 	.word	0x080010df
	case TRAFFIC_OFF:
		HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 8001018:	4a44      	ldr	r2, [pc, #272]	; (800112c <trafficReInit+0x150>)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001020:	2201      	movs	r2, #1
 8001022:	4619      	mov	r1, r3
 8001024:	4842      	ldr	r0, [pc, #264]	; (8001130 <trafficReInit+0x154>)
 8001026:	f000 febd 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 800102a:	4a42      	ldr	r2, [pc, #264]	; (8001134 <trafficReInit+0x158>)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	483e      	ldr	r0, [pc, #248]	; (8001130 <trafficReInit+0x154>)
 8001038:	f000 feb4 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 800103c:	4a3e      	ldr	r2, [pc, #248]	; (8001138 <trafficReInit+0x15c>)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001044:	2201      	movs	r2, #1
 8001046:	4619      	mov	r1, r3
 8001048:	4839      	ldr	r0, [pc, #228]	; (8001130 <trafficReInit+0x154>)
 800104a:	f000 feab 	bl	8001da4 <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_OFF;
 800104e:	4a3b      	ldr	r2, [pc, #236]	; (800113c <trafficReInit+0x160>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
		break;
 8001058:	e065      	b.n	8001126 <trafficReInit+0x14a>
	case TRAFFIC_RED:
		HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_RESET);
 800105a:	4a34      	ldr	r2, [pc, #208]	; (800112c <trafficReInit+0x150>)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4832      	ldr	r0, [pc, #200]	; (8001130 <trafficReInit+0x154>)
 8001068:	f000 fe9c 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 800106c:	4a31      	ldr	r2, [pc, #196]	; (8001134 <trafficReInit+0x158>)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001074:	2201      	movs	r2, #1
 8001076:	4619      	mov	r1, r3
 8001078:	482d      	ldr	r0, [pc, #180]	; (8001130 <trafficReInit+0x154>)
 800107a:	f000 fe93 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <trafficReInit+0x15c>)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001086:	2201      	movs	r2, #1
 8001088:	4619      	mov	r1, r3
 800108a:	4829      	ldr	r0, [pc, #164]	; (8001130 <trafficReInit+0x154>)
 800108c:	f000 fe8a 	bl	8001da4 <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_RED;
 8001090:	4a2a      	ldr	r2, [pc, #168]	; (800113c <trafficReInit+0x160>)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	4413      	add	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	701a      	strb	r2, [r3, #0]
		break;
 800109a:	e044      	b.n	8001126 <trafficReInit+0x14a>
	case TRAFFIC_AMBER:
		HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <trafficReInit+0x150>)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a4:	2201      	movs	r2, #1
 80010a6:	4619      	mov	r1, r3
 80010a8:	4821      	ldr	r0, [pc, #132]	; (8001130 <trafficReInit+0x154>)
 80010aa:	f000 fe7b 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_RESET);
 80010ae:	4a21      	ldr	r2, [pc, #132]	; (8001134 <trafficReInit+0x158>)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b6:	2200      	movs	r2, #0
 80010b8:	4619      	mov	r1, r3
 80010ba:	481d      	ldr	r0, [pc, #116]	; (8001130 <trafficReInit+0x154>)
 80010bc:	f000 fe72 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_SET);
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <trafficReInit+0x15c>)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <trafficReInit+0x154>)
 80010ce:	f000 fe69 	bl	8001da4 <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_AMBER;
 80010d2:	4a1a      	ldr	r2, [pc, #104]	; (800113c <trafficReInit+0x160>)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	2202      	movs	r2, #2
 80010da:	701a      	strb	r2, [r3, #0]
		break;
 80010dc:	e023      	b.n	8001126 <trafficReInit+0x14a>
	case TRAFFIC_GREEN:
		HAL_GPIO_WritePin(GPIOB, trafficRedPins[index], GPIO_PIN_SET);
 80010de:	4a13      	ldr	r2, [pc, #76]	; (800112c <trafficReInit+0x150>)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e6:	2201      	movs	r2, #1
 80010e8:	4619      	mov	r1, r3
 80010ea:	4811      	ldr	r0, [pc, #68]	; (8001130 <trafficReInit+0x154>)
 80010ec:	f000 fe5a 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficAmberPins[index], GPIO_PIN_SET);
 80010f0:	4a10      	ldr	r2, [pc, #64]	; (8001134 <trafficReInit+0x158>)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	480c      	ldr	r0, [pc, #48]	; (8001130 <trafficReInit+0x154>)
 80010fe:	f000 fe51 	bl	8001da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, trafficGreenPins[index], GPIO_PIN_RESET);
 8001102:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <trafficReInit+0x15c>)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110a:	2200      	movs	r2, #0
 800110c:	4619      	mov	r1, r3
 800110e:	4808      	ldr	r0, [pc, #32]	; (8001130 <trafficReInit+0x154>)
 8001110:	f000 fe48 	bl	8001da4 <HAL_GPIO_WritePin>
		trafficState[index] = TRAFFIC_GREEN;
 8001114:	4a09      	ldr	r2, [pc, #36]	; (800113c <trafficReInit+0x160>)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4413      	add	r3, r2
 800111a:	2203      	movs	r2, #3
 800111c:	701a      	strb	r2, [r3, #0]
		break;
 800111e:	e002      	b.n	8001126 <trafficReInit+0x14a>
	if (index < 0 || index >= TRAFFIC_NUMBER) return;
 8001120:	bf00      	nop
 8001122:	e000      	b.n	8001126 <trafficReInit+0x14a>
	default:
		break;
 8001124:	bf00      	nop
	}
}
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000038 	.word	0x20000038
 8001130:	40010c00 	.word	0x40010c00
 8001134:	2000003c 	.word	0x2000003c
 8001138:	20000040 	.word	0x20000040
 800113c:	200000f4 	.word	0x200000f4

08001140 <fsmInit>:

#include "processing_fsm.h"

enum FSM_STATE fsmState = 0;

void fsmInit(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	trafficInit();
 8001144:	f7ff ff2e 	bl	8000fa4 <trafficInit>
	fsmReInit(FSM_NORMAL);
 8001148:	2000      	movs	r0, #0
 800114a:	f000 f803 	bl	8001154 <fsmReInit>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
	...

08001154 <fsmReInit>:

void fsmReInit(enum FSM_STATE state) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	71fb      	strb	r3, [r7, #7]
	switch (state) {
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2b03      	cmp	r3, #3
 8001162:	d87a      	bhi.n	800125a <fsmReInit+0x106>
 8001164:	a201      	add	r2, pc, #4	; (adr r2, 800116c <fsmReInit+0x18>)
 8001166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800116a:	bf00      	nop
 800116c:	0800117d 	.word	0x0800117d
 8001170:	080011d1 	.word	0x080011d1
 8001174:	080011ff 	.word	0x080011ff
 8001178:	0800122d 	.word	0x0800122d
	case FSM_NORMAL:
		timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 800117c:	2101      	movs	r1, #1
 800117e:	2064      	movs	r0, #100	; 0x64
 8001180:	f000 fa1e 	bl	80015c0 <timerSet>
		timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8001184:	4b37      	ldr	r3, [pc, #220]	; (8001264 <fsmReInit+0x110>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2264      	movs	r2, #100	; 0x64
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	2102      	movs	r1, #2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 fa15 	bl	80015c0 <timerSet>
		timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <fsmReInit+0x114>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2264      	movs	r2, #100	; 0x64
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	2103      	movs	r1, #3
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 fa0c 	bl	80015c0 <timerSet>
		led7segNumbers[0] = trafficRedDuration;
 80011a8:	4b2e      	ldr	r3, [pc, #184]	; (8001264 <fsmReInit+0x110>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2f      	ldr	r2, [pc, #188]	; (800126c <fsmReInit+0x118>)
 80011ae:	6013      	str	r3, [r2, #0]
		led7segNumbers[1] = trafficGreenDuration;
 80011b0:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <fsmReInit+0x114>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a2d      	ldr	r2, [pc, #180]	; (800126c <fsmReInit+0x118>)
 80011b6:	6053      	str	r3, [r2, #4]
		trafficReInit(TRAFFIC_RED, 0);
 80011b8:	2100      	movs	r1, #0
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff ff0e 	bl	8000fdc <trafficReInit>
		trafficReInit(TRAFFIC_GREEN, 1);
 80011c0:	2101      	movs	r1, #1
 80011c2:	2003      	movs	r0, #3
 80011c4:	f7ff ff0a 	bl	8000fdc <trafficReInit>
		fsmState = FSM_NORMAL;
 80011c8:	4b29      	ldr	r3, [pc, #164]	; (8001270 <fsmReInit+0x11c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
		break;
 80011ce:	e045      	b.n	800125c <fsmReInit+0x108>
	case FSM_RED_MOD:
		timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80011d0:	2101      	movs	r1, #1
 80011d2:	2019      	movs	r0, #25
 80011d4:	f000 f9f4 	bl	80015c0 <timerSet>
		led7segNumbers[0] = 2;
 80011d8:	4b24      	ldr	r3, [pc, #144]	; (800126c <fsmReInit+0x118>)
 80011da:	2202      	movs	r2, #2
 80011dc:	601a      	str	r2, [r3, #0]
		led7segNumbers[1] = trafficRedDuration;
 80011de:	4b21      	ldr	r3, [pc, #132]	; (8001264 <fsmReInit+0x110>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a22      	ldr	r2, [pc, #136]	; (800126c <fsmReInit+0x118>)
 80011e4:	6053      	str	r3, [r2, #4]
		trafficReInit(TRAFFIC_OFF, 0);
 80011e6:	2100      	movs	r1, #0
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff fef7 	bl	8000fdc <trafficReInit>
		trafficReInit(TRAFFIC_OFF, 1);
 80011ee:	2101      	movs	r1, #1
 80011f0:	2000      	movs	r0, #0
 80011f2:	f7ff fef3 	bl	8000fdc <trafficReInit>
		fsmState = FSM_RED_MOD;
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <fsmReInit+0x11c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		break;
 80011fc:	e02e      	b.n	800125c <fsmReInit+0x108>
	case FSM_AMBER_MOD:
		timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80011fe:	2101      	movs	r1, #1
 8001200:	2019      	movs	r0, #25
 8001202:	f000 f9dd 	bl	80015c0 <timerSet>
		led7segNumbers[0] = 3;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <fsmReInit+0x118>)
 8001208:	2203      	movs	r2, #3
 800120a:	601a      	str	r2, [r3, #0]
		led7segNumbers[1] = trafficAmberDuration;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <fsmReInit+0x120>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a16      	ldr	r2, [pc, #88]	; (800126c <fsmReInit+0x118>)
 8001212:	6053      	str	r3, [r2, #4]
		trafficReInit(TRAFFIC_OFF, 0);
 8001214:	2100      	movs	r1, #0
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff fee0 	bl	8000fdc <trafficReInit>
		trafficReInit(TRAFFIC_OFF, 1);
 800121c:	2101      	movs	r1, #1
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff fedc 	bl	8000fdc <trafficReInit>
		fsmState = FSM_AMBER_MOD;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <fsmReInit+0x11c>)
 8001226:	2202      	movs	r2, #2
 8001228:	701a      	strb	r2, [r3, #0]
		break;
 800122a:	e017      	b.n	800125c <fsmReInit+0x108>
	case FSM_GREEN_MOD:
		timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 800122c:	2101      	movs	r1, #1
 800122e:	2019      	movs	r0, #25
 8001230:	f000 f9c6 	bl	80015c0 <timerSet>
		led7segNumbers[0] = 4;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <fsmReInit+0x118>)
 8001236:	2204      	movs	r2, #4
 8001238:	601a      	str	r2, [r3, #0]
		led7segNumbers[1] = trafficGreenDuration;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <fsmReInit+0x114>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <fsmReInit+0x118>)
 8001240:	6053      	str	r3, [r2, #4]
		trafficReInit(TRAFFIC_OFF, 0);
 8001242:	2100      	movs	r1, #0
 8001244:	2000      	movs	r0, #0
 8001246:	f7ff fec9 	bl	8000fdc <trafficReInit>
		trafficReInit(TRAFFIC_OFF, 1);
 800124a:	2101      	movs	r1, #1
 800124c:	2000      	movs	r0, #0
 800124e:	f7ff fec5 	bl	8000fdc <trafficReInit>
		fsmState = FSM_GREEN_MOD;
 8001252:	4b07      	ldr	r3, [pc, #28]	; (8001270 <fsmReInit+0x11c>)
 8001254:	2203      	movs	r2, #3
 8001256:	701a      	strb	r2, [r3, #0]
		break;
 8001258:	e000      	b.n	800125c <fsmReInit+0x108>
	default:
		break;
 800125a:	bf00      	nop
	}
}
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000e8 	.word	0x200000e8
 8001268:	200000f0 	.word	0x200000f0
 800126c:	200000d8 	.word	0x200000d8
 8001270:	200000f6 	.word	0x200000f6
 8001274:	200000ec 	.word	0x200000ec

08001278 <fsmProcessing>:

void fsmProcessing(void) {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
	switch (fsmState) {
 800127c:	4bb1      	ldr	r3, [pc, #708]	; (8001544 <fsmProcessing+0x2cc>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b03      	cmp	r3, #3
 8001282:	f200 8192 	bhi.w	80015aa <fsmProcessing+0x332>
 8001286:	a201      	add	r2, pc, #4	; (adr r2, 800128c <fsmProcessing+0x14>)
 8001288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128c:	0800129d 	.word	0x0800129d
 8001290:	08001413 	.word	0x08001413
 8001294:	080014cf 	.word	0x080014cf
 8001298:	0800152f 	.word	0x0800152f
	case FSM_NORMAL:
		if (timerFlags[1] == 1) {
 800129c:	4baa      	ldr	r3, [pc, #680]	; (8001548 <fsmProcessing+0x2d0>)
 800129e:	785b      	ldrb	r3, [r3, #1]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d11b      	bne.n	80012dc <fsmProcessing+0x64>
			timerSet(TRAFFIC_SECOND_DURATION / TIMER_DURATION, 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f000 f98a 	bl	80015c0 <timerSet>
			led7segNumbers[0] --;
 80012ac:	4ba7      	ldr	r3, [pc, #668]	; (800154c <fsmProcessing+0x2d4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	4aa6      	ldr	r2, [pc, #664]	; (800154c <fsmProcessing+0x2d4>)
 80012b4:	6013      	str	r3, [r2, #0]
			if (led7segNumbers[0] < 0) {
 80012b6:	4ba5      	ldr	r3, [pc, #660]	; (800154c <fsmProcessing+0x2d4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	da02      	bge.n	80012c4 <fsmProcessing+0x4c>
				led7segNumbers[0] = 0;
 80012be:	4ba3      	ldr	r3, [pc, #652]	; (800154c <fsmProcessing+0x2d4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
			}
			led7segNumbers[1] --;
 80012c4:	4ba1      	ldr	r3, [pc, #644]	; (800154c <fsmProcessing+0x2d4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	4aa0      	ldr	r2, [pc, #640]	; (800154c <fsmProcessing+0x2d4>)
 80012cc:	6053      	str	r3, [r2, #4]
			if (led7segNumbers[1] < 0) {
 80012ce:	4b9f      	ldr	r3, [pc, #636]	; (800154c <fsmProcessing+0x2d4>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	da02      	bge.n	80012dc <fsmProcessing+0x64>
				led7segNumbers[1] = 0;
 80012d6:	4b9d      	ldr	r3, [pc, #628]	; (800154c <fsmProcessing+0x2d4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	605a      	str	r2, [r3, #4]
			}
		}
		if (timerFlags[2] == 1) {
 80012dc:	4b9a      	ldr	r3, [pc, #616]	; (8001548 <fsmProcessing+0x2d0>)
 80012de:	789b      	ldrb	r3, [r3, #2]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d140      	bne.n	8001366 <fsmProcessing+0xee>
			switch (trafficState[0]) {
 80012e4:	4b9a      	ldr	r3, [pc, #616]	; (8001550 <fsmProcessing+0x2d8>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d02a      	beq.n	8001342 <fsmProcessing+0xca>
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	dc3c      	bgt.n	800136a <fsmProcessing+0xf2>
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d002      	beq.n	80012fa <fsmProcessing+0x82>
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d012      	beq.n	800131e <fsmProcessing+0xa6>
				timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
				led7segNumbers[0] = trafficAmberDuration;
				trafficReInit(TRAFFIC_AMBER, 0);
				break;
			default:
				break;
 80012f8:	e037      	b.n	800136a <fsmProcessing+0xf2>
				timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 80012fa:	4b96      	ldr	r3, [pc, #600]	; (8001554 <fsmProcessing+0x2dc>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	2102      	movs	r1, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f95a 	bl	80015c0 <timerSet>
				led7segNumbers[0] = trafficGreenDuration;
 800130c:	4b91      	ldr	r3, [pc, #580]	; (8001554 <fsmProcessing+0x2dc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a8e      	ldr	r2, [pc, #568]	; (800154c <fsmProcessing+0x2d4>)
 8001312:	6013      	str	r3, [r2, #0]
				trafficReInit(TRAFFIC_GREEN, 0);
 8001314:	2100      	movs	r1, #0
 8001316:	2003      	movs	r0, #3
 8001318:	f7ff fe60 	bl	8000fdc <trafficReInit>
				break;
 800131c:	e026      	b.n	800136c <fsmProcessing+0xf4>
				timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 800131e:	4b8e      	ldr	r3, [pc, #568]	; (8001558 <fsmProcessing+0x2e0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2264      	movs	r2, #100	; 0x64
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f948 	bl	80015c0 <timerSet>
				led7segNumbers[0] = trafficRedDuration;
 8001330:	4b89      	ldr	r3, [pc, #548]	; (8001558 <fsmProcessing+0x2e0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a85      	ldr	r2, [pc, #532]	; (800154c <fsmProcessing+0x2d4>)
 8001336:	6013      	str	r3, [r2, #0]
				trafficReInit(TRAFFIC_RED, 0);
 8001338:	2100      	movs	r1, #0
 800133a:	2001      	movs	r0, #1
 800133c:	f7ff fe4e 	bl	8000fdc <trafficReInit>
				break;
 8001340:	e014      	b.n	800136c <fsmProcessing+0xf4>
				timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 2);
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <fsmProcessing+0x2e4>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2264      	movs	r2, #100	; 0x64
 8001348:	fb02 f303 	mul.w	r3, r2, r3
 800134c:	2102      	movs	r1, #2
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f936 	bl	80015c0 <timerSet>
				led7segNumbers[0] = trafficAmberDuration;
 8001354:	4b81      	ldr	r3, [pc, #516]	; (800155c <fsmProcessing+0x2e4>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7c      	ldr	r2, [pc, #496]	; (800154c <fsmProcessing+0x2d4>)
 800135a:	6013      	str	r3, [r2, #0]
				trafficReInit(TRAFFIC_AMBER, 0);
 800135c:	2100      	movs	r1, #0
 800135e:	2002      	movs	r0, #2
 8001360:	f7ff fe3c 	bl	8000fdc <trafficReInit>
				break;
 8001364:	e002      	b.n	800136c <fsmProcessing+0xf4>
			}
		}
 8001366:	bf00      	nop
 8001368:	e000      	b.n	800136c <fsmProcessing+0xf4>
				break;
 800136a:	bf00      	nop
		if (timerFlags[3] == 1) {
 800136c:	4b76      	ldr	r3, [pc, #472]	; (8001548 <fsmProcessing+0x2d0>)
 800136e:	78db      	ldrb	r3, [r3, #3]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d140      	bne.n	80013f6 <fsmProcessing+0x17e>
			switch (trafficState[1]) {
 8001374:	4b76      	ldr	r3, [pc, #472]	; (8001550 <fsmProcessing+0x2d8>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	2b03      	cmp	r3, #3
 800137a:	d02a      	beq.n	80013d2 <fsmProcessing+0x15a>
 800137c:	2b03      	cmp	r3, #3
 800137e:	dc3c      	bgt.n	80013fa <fsmProcessing+0x182>
 8001380:	2b01      	cmp	r3, #1
 8001382:	d002      	beq.n	800138a <fsmProcessing+0x112>
 8001384:	2b02      	cmp	r3, #2
 8001386:	d012      	beq.n	80013ae <fsmProcessing+0x136>
				timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
				led7segNumbers[1] = trafficAmberDuration;
				trafficReInit(TRAFFIC_AMBER, 1);
				break;
			default:
				break;
 8001388:	e037      	b.n	80013fa <fsmProcessing+0x182>
				timerSet(trafficGreenDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 800138a:	4b72      	ldr	r3, [pc, #456]	; (8001554 <fsmProcessing+0x2dc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	2264      	movs	r2, #100	; 0x64
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	2103      	movs	r1, #3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f912 	bl	80015c0 <timerSet>
				led7segNumbers[1] = trafficGreenDuration;
 800139c:	4b6d      	ldr	r3, [pc, #436]	; (8001554 <fsmProcessing+0x2dc>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <fsmProcessing+0x2d4>)
 80013a2:	6053      	str	r3, [r2, #4]
				trafficReInit(TRAFFIC_GREEN, 1);
 80013a4:	2101      	movs	r1, #1
 80013a6:	2003      	movs	r0, #3
 80013a8:	f7ff fe18 	bl	8000fdc <trafficReInit>
				break;
 80013ac:	e026      	b.n	80013fc <fsmProcessing+0x184>
				timerSet(trafficRedDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 80013ae:	4b6a      	ldr	r3, [pc, #424]	; (8001558 <fsmProcessing+0x2e0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2264      	movs	r2, #100	; 0x64
 80013b4:	fb02 f303 	mul.w	r3, r2, r3
 80013b8:	2103      	movs	r1, #3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f900 	bl	80015c0 <timerSet>
				led7segNumbers[1] = trafficRedDuration;
 80013c0:	4b65      	ldr	r3, [pc, #404]	; (8001558 <fsmProcessing+0x2e0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a61      	ldr	r2, [pc, #388]	; (800154c <fsmProcessing+0x2d4>)
 80013c6:	6053      	str	r3, [r2, #4]
				trafficReInit(TRAFFIC_RED, 1);
 80013c8:	2101      	movs	r1, #1
 80013ca:	2001      	movs	r0, #1
 80013cc:	f7ff fe06 	bl	8000fdc <trafficReInit>
				break;
 80013d0:	e014      	b.n	80013fc <fsmProcessing+0x184>
				timerSet(trafficAmberDuration * TRAFFIC_SECOND_DURATION / TIMER_DURATION, 3);
 80013d2:	4b62      	ldr	r3, [pc, #392]	; (800155c <fsmProcessing+0x2e4>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2264      	movs	r2, #100	; 0x64
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	2103      	movs	r1, #3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f8ee 	bl	80015c0 <timerSet>
				led7segNumbers[1] = trafficAmberDuration;
 80013e4:	4b5d      	ldr	r3, [pc, #372]	; (800155c <fsmProcessing+0x2e4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <fsmProcessing+0x2d4>)
 80013ea:	6053      	str	r3, [r2, #4]
				trafficReInit(TRAFFIC_AMBER, 1);
 80013ec:	2101      	movs	r1, #1
 80013ee:	2002      	movs	r0, #2
 80013f0:	f7ff fdf4 	bl	8000fdc <trafficReInit>
				break;
 80013f4:	e002      	b.n	80013fc <fsmProcessing+0x184>
			}
		}
 80013f6:	bf00      	nop
 80013f8:	e000      	b.n	80013fc <fsmProcessing+0x184>
				break;
 80013fa:	bf00      	nop
		if (buttonPressed(0)) {
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fb3b 	bl	8000a78 <buttonPressed>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80d2 	beq.w	80015ae <fsmProcessing+0x336>
			fsmReInit(FSM_RED_MOD);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fea2 	bl	8001154 <fsmReInit>
		}
		break;
 8001410:	e0cd      	b.n	80015ae <fsmProcessing+0x336>
	case FSM_RED_MOD:
		if (timerFlags[1] == 1) {
 8001412:	4b4d      	ldr	r3, [pc, #308]	; (8001548 <fsmProcessing+0x2d0>)
 8001414:	785b      	ldrb	r3, [r3, #1]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d120      	bne.n	800145c <fsmProcessing+0x1e4>
			switch (trafficState[0]) {
 800141a:	4b4d      	ldr	r3, [pc, #308]	; (8001550 <fsmProcessing+0x2d8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d002      	beq.n	8001428 <fsmProcessing+0x1b0>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d00d      	beq.n	8001442 <fsmProcessing+0x1ca>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
				trafficReInit(TRAFFIC_OFF, 0);
				trafficReInit(TRAFFIC_OFF, 1);
				break;
			default:
				break;
 8001426:	e01a      	b.n	800145e <fsmProcessing+0x1e6>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001428:	2101      	movs	r1, #1
 800142a:	2019      	movs	r0, #25
 800142c:	f000 f8c8 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_RED, 0);
 8001430:	2100      	movs	r1, #0
 8001432:	2001      	movs	r0, #1
 8001434:	f7ff fdd2 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_RED, 1);
 8001438:	2101      	movs	r1, #1
 800143a:	2001      	movs	r0, #1
 800143c:	f7ff fdce 	bl	8000fdc <trafficReInit>
				break;
 8001440:	e00d      	b.n	800145e <fsmProcessing+0x1e6>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001442:	2101      	movs	r1, #1
 8001444:	2019      	movs	r0, #25
 8001446:	f000 f8bb 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_OFF, 0);
 800144a:	2100      	movs	r1, #0
 800144c:	2000      	movs	r0, #0
 800144e:	f7ff fdc5 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_OFF, 1);
 8001452:	2101      	movs	r1, #1
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fdc1 	bl	8000fdc <trafficReInit>
				break;
 800145a:	e000      	b.n	800145e <fsmProcessing+0x1e6>
			}
		}
 800145c:	bf00      	nop
		if (buttonPressed(0)) {
 800145e:	2000      	movs	r0, #0
 8001460:	f7ff fb0a 	bl	8000a78 <buttonPressed>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <fsmProcessing+0x1f8>
			fsmReInit(FSM_AMBER_MOD);
 800146a:	2002      	movs	r0, #2
 800146c:	f7ff fe72 	bl	8001154 <fsmReInit>
		}
		if (buttonPressed(1)) {
 8001470:	2001      	movs	r0, #1
 8001472:	f7ff fb01 	bl	8000a78 <buttonPressed>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00b      	beq.n	8001494 <fsmProcessing+0x21c>
			led7segNumbers[1] ++;
 800147c:	4b33      	ldr	r3, [pc, #204]	; (800154c <fsmProcessing+0x2d4>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	3301      	adds	r3, #1
 8001482:	4a32      	ldr	r2, [pc, #200]	; (800154c <fsmProcessing+0x2d4>)
 8001484:	6053      	str	r3, [r2, #4]
			if (led7segNumbers[1] >= pow(10, LED7SEG_DIGIT_NUMBER)) {
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <fsmProcessing+0x2d4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b63      	cmp	r3, #99	; 0x63
 800148c:	dd02      	ble.n	8001494 <fsmProcessing+0x21c>
				led7segNumbers[1] = 0;
 800148e:	4b2f      	ldr	r3, [pc, #188]	; (800154c <fsmProcessing+0x2d4>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
			}
		}
		if (buttonPressed(2)) {
 8001494:	2002      	movs	r0, #2
 8001496:	f7ff faef 	bl	8000a78 <buttonPressed>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <fsmProcessing+0x240>
			led7segNumbers[1] --;
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <fsmProcessing+0x2d4>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a29      	ldr	r2, [pc, #164]	; (800154c <fsmProcessing+0x2d4>)
 80014a8:	6053      	str	r3, [r2, #4]
			if (led7segNumbers[1] < 0) {
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <fsmProcessing+0x2d4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	da02      	bge.n	80014b8 <fsmProcessing+0x240>
				led7segNumbers[1] = pow(10, LED7SEG_DIGIT_NUMBER) - 1;
 80014b2:	4b26      	ldr	r3, [pc, #152]	; (800154c <fsmProcessing+0x2d4>)
 80014b4:	2263      	movs	r2, #99	; 0x63
 80014b6:	605a      	str	r2, [r3, #4]
			}
		}
		if (buttonPressed(3)) {
 80014b8:	2003      	movs	r0, #3
 80014ba:	f7ff fadd 	bl	8000a78 <buttonPressed>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d076      	beq.n	80015b2 <fsmProcessing+0x33a>
			trafficRedDuration = led7segNumbers[1];
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <fsmProcessing+0x2d4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4a23      	ldr	r2, [pc, #140]	; (8001558 <fsmProcessing+0x2e0>)
 80014ca:	6013      	str	r3, [r2, #0]
		}
		break;
 80014cc:	e071      	b.n	80015b2 <fsmProcessing+0x33a>
	case FSM_AMBER_MOD:
		if (timerFlags[1] == 1) {
 80014ce:	4b1e      	ldr	r3, [pc, #120]	; (8001548 <fsmProcessing+0x2d0>)
 80014d0:	785b      	ldrb	r3, [r3, #1]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d120      	bne.n	8001518 <fsmProcessing+0x2a0>
			switch (trafficState[0]) {
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <fsmProcessing+0x2d8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d002      	beq.n	80014e4 <fsmProcessing+0x26c>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d00d      	beq.n	80014fe <fsmProcessing+0x286>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
				trafficReInit(TRAFFIC_OFF, 0);
				trafficReInit(TRAFFIC_OFF, 1);
				break;
			default:
				break;
 80014e2:	e01a      	b.n	800151a <fsmProcessing+0x2a2>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80014e4:	2101      	movs	r1, #1
 80014e6:	2019      	movs	r0, #25
 80014e8:	f000 f86a 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_AMBER, 0);
 80014ec:	2100      	movs	r1, #0
 80014ee:	2002      	movs	r0, #2
 80014f0:	f7ff fd74 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_AMBER, 1);
 80014f4:	2101      	movs	r1, #1
 80014f6:	2002      	movs	r0, #2
 80014f8:	f7ff fd70 	bl	8000fdc <trafficReInit>
				break;
 80014fc:	e00d      	b.n	800151a <fsmProcessing+0x2a2>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 80014fe:	2101      	movs	r1, #1
 8001500:	2019      	movs	r0, #25
 8001502:	f000 f85d 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_OFF, 0);
 8001506:	2100      	movs	r1, #0
 8001508:	2000      	movs	r0, #0
 800150a:	f7ff fd67 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_OFF, 1);
 800150e:	2101      	movs	r1, #1
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff fd63 	bl	8000fdc <trafficReInit>
				break;
 8001516:	e000      	b.n	800151a <fsmProcessing+0x2a2>
			}
		}
 8001518:	bf00      	nop
		if (buttonPressed(0)) {
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff faac 	bl	8000a78 <buttonPressed>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d047      	beq.n	80015b6 <fsmProcessing+0x33e>
			fsmReInit(FSM_GREEN_MOD);
 8001526:	2003      	movs	r0, #3
 8001528:	f7ff fe14 	bl	8001154 <fsmReInit>
		}
		break;
 800152c:	e043      	b.n	80015b6 <fsmProcessing+0x33e>
	case FSM_GREEN_MOD:
		if (timerFlags[1] == 1) {
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <fsmProcessing+0x2d0>)
 8001530:	785b      	ldrb	r3, [r3, #1]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d12e      	bne.n	8001594 <fsmProcessing+0x31c>
			switch (trafficState[0]) {
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <fsmProcessing+0x2d8>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d010      	beq.n	8001560 <fsmProcessing+0x2e8>
 800153e:	2b03      	cmp	r3, #3
 8001540:	d01b      	beq.n	800157a <fsmProcessing+0x302>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
				trafficReInit(TRAFFIC_OFF, 0);
				trafficReInit(TRAFFIC_OFF, 1);
				break;
			default:
				break;
 8001542:	e028      	b.n	8001596 <fsmProcessing+0x31e>
 8001544:	200000f6 	.word	0x200000f6
 8001548:	20000148 	.word	0x20000148
 800154c:	200000d8 	.word	0x200000d8
 8001550:	200000f4 	.word	0x200000f4
 8001554:	200000f0 	.word	0x200000f0
 8001558:	200000e8 	.word	0x200000e8
 800155c:	200000ec 	.word	0x200000ec
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 8001560:	2101      	movs	r1, #1
 8001562:	2019      	movs	r0, #25
 8001564:	f000 f82c 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_GREEN, 0);
 8001568:	2100      	movs	r1, #0
 800156a:	2003      	movs	r0, #3
 800156c:	f7ff fd36 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_GREEN, 1);
 8001570:	2101      	movs	r1, #1
 8001572:	2003      	movs	r0, #3
 8001574:	f7ff fd32 	bl	8000fdc <trafficReInit>
				break;
 8001578:	e00d      	b.n	8001596 <fsmProcessing+0x31e>
				timerSet(TRAFFIC_BLINKING_DURATION / TIMER_DURATION, 1);
 800157a:	2101      	movs	r1, #1
 800157c:	2019      	movs	r0, #25
 800157e:	f000 f81f 	bl	80015c0 <timerSet>
				trafficReInit(TRAFFIC_OFF, 0);
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f7ff fd29 	bl	8000fdc <trafficReInit>
				trafficReInit(TRAFFIC_OFF, 1);
 800158a:	2101      	movs	r1, #1
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fd25 	bl	8000fdc <trafficReInit>
				break;
 8001592:	e000      	b.n	8001596 <fsmProcessing+0x31e>
			}
		}
 8001594:	bf00      	nop
		if (buttonPressed(0)) {
 8001596:	2000      	movs	r0, #0
 8001598:	f7ff fa6e 	bl	8000a78 <buttonPressed>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00b      	beq.n	80015ba <fsmProcessing+0x342>
			fsmReInit(FSM_NORMAL);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f7ff fdd6 	bl	8001154 <fsmReInit>
		}
		break;
 80015a8:	e007      	b.n	80015ba <fsmProcessing+0x342>
	default:
		break;
 80015aa:	bf00      	nop
 80015ac:	e006      	b.n	80015bc <fsmProcessing+0x344>
		break;
 80015ae:	bf00      	nop
 80015b0:	e004      	b.n	80015bc <fsmProcessing+0x344>
		break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <fsmProcessing+0x344>
		break;
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <fsmProcessing+0x344>
		break;
 80015ba:	bf00      	nop
	}
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}

080015c0 <timerSet>:
#include "software_timer.h"

uint8_t timerFlags[TIMER_NUMBER];
static int16_t timerCounters[TIMER_NUMBER];

void timerSet(int duration, int index) {
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
	if (index >= 0 && index < TIMER_NUMBER) {
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0d      	blt.n	80015ec <timerSet+0x2c>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	dc0a      	bgt.n	80015ec <timerSet+0x2c>
		timerCounters[index] = duration;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	b219      	sxth	r1, r3
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <timerSet+0x38>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		timerFlags[index] = 0;
 80015e2:	4a06      	ldr	r2, [pc, #24]	; (80015fc <timerSet+0x3c>)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
	}
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bc80      	pop	{r7}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	200000f8 	.word	0x200000f8
 80015fc:	20000148 	.word	0x20000148

08001600 <timerRun>:

void timerRun() {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	for (int i = 0; i < TIMER_NUMBER; i ++) {
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	e01f      	b.n	800164c <timerRun+0x4c>
		if (timerCounters[i] > 0) {
 800160c:	4a14      	ldr	r2, [pc, #80]	; (8001660 <timerRun+0x60>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dd16      	ble.n	8001646 <timerRun+0x46>
			timerCounters[i] --;
 8001618:	4a11      	ldr	r2, [pc, #68]	; (8001660 <timerRun+0x60>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001620:	b29b      	uxth	r3, r3
 8001622:	3b01      	subs	r3, #1
 8001624:	b29b      	uxth	r3, r3
 8001626:	b219      	sxth	r1, r3
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <timerRun+0x60>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			if (timerCounters[i] <= 0) {
 8001630:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <timerRun+0x60>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001638:	2b00      	cmp	r3, #0
 800163a:	dc04      	bgt.n	8001646 <timerRun+0x46>
				timerFlags[i] = 1;
 800163c:	4a09      	ldr	r2, [pc, #36]	; (8001664 <timerRun+0x64>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	2201      	movs	r2, #1
 8001644:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < TIMER_NUMBER; i ++) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	3301      	adds	r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b03      	cmp	r3, #3
 8001650:	dddc      	ble.n	800160c <timerRun+0xc>
			}
		}
	}
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200000f8 	.word	0x200000f8
 8001664:	20000148 	.word	0x20000148

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <HAL_MspInit+0x5c>)
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	4a14      	ldr	r2, [pc, #80]	; (80016c4 <HAL_MspInit+0x5c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6193      	str	r3, [r2, #24]
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_MspInit+0x5c>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x5c>)
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	4a0e      	ldr	r2, [pc, #56]	; (80016c4 <HAL_MspInit+0x5c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	61d3      	str	r3, [r2, #28]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_MspInit+0x5c>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800169e:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_MspInit+0x60>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4a04      	ldr	r2, [pc, #16]	; (80016c8 <HAL_MspInit+0x60>)
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000

080016cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016dc:	d113      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016de:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_TIM_Base_MspInit+0x44>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201c      	movs	r0, #28
 80016fc:	f000 f9a1 	bl	8001a42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001700:	201c      	movs	r0, #28
 8001702:	f000 f9ba 	bl	8001a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40021000 	.word	0x40021000

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <NMI_Handler+0x4>

0800171a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171e:	e7fe      	b.n	800171e <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <MemManage_Handler+0x4>

08001726 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <BusFault_Handler+0x4>

0800172c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <UsageFault_Handler+0x4>

08001732 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr

0800173e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	bc80      	pop	{r7}
 8001748:	4770      	bx	lr

0800174a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	bc80      	pop	{r7}
 8001754:	4770      	bx	lr

08001756 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800175a:	f000 f87f 	bl	800185c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <TIM2_IRQHandler+0x10>)
 800176a:	f000 ffab 	bl	80026c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000100 	.word	0x20000100

08001778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001784:	f7ff fff8 	bl	8001778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001788:	480b      	ldr	r0, [pc, #44]	; (80017b8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800178a:	490c      	ldr	r1, [pc, #48]	; (80017bc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800178c:	4a0c      	ldr	r2, [pc, #48]	; (80017c0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800178e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001790:	e002      	b.n	8001798 <LoopCopyDataInit>

08001792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001796:	3304      	adds	r3, #4

08001798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800179c:	d3f9      	bcc.n	8001792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800179e:	4a09      	ldr	r2, [pc, #36]	; (80017c4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017a0:	4c09      	ldr	r4, [pc, #36]	; (80017c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a4:	e001      	b.n	80017aa <LoopFillZerobss>

080017a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017a8:	3204      	adds	r2, #4

080017aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ac:	d3fb      	bcc.n	80017a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ae:	f001 facf 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017b2:	f7ff f983 	bl	8000abc <main>
  bx lr
 80017b6:	4770      	bx	lr
  ldr r0, =_sdata
 80017b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017bc:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 80017c0:	08003d50 	.word	0x08003d50
  ldr r2, =_sbss
 80017c4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 80017c8:	20000150 	.word	0x20000150

080017cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017cc:	e7fe      	b.n	80017cc <ADC1_2_IRQHandler>
	...

080017d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d4:	4b08      	ldr	r3, [pc, #32]	; (80017f8 <HAL_Init+0x28>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a07      	ldr	r2, [pc, #28]	; (80017f8 <HAL_Init+0x28>)
 80017da:	f043 0310 	orr.w	r3, r3, #16
 80017de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f923 	bl	8001a2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f808 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ec:	f7ff ff3c 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x54>)
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <HAL_InitTick+0x58>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001812:	fbb3 f3f1 	udiv	r3, r3, r1
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	4618      	mov	r0, r3
 800181c:	f000 f93b 	bl	8001a96 <HAL_SYSTICK_Config>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00e      	b.n	8001848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b0f      	cmp	r3, #15
 800182e:	d80a      	bhi.n	8001846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f000 f903 	bl	8001a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800183c:	4a06      	ldr	r2, [pc, #24]	; (8001858 <HAL_InitTick+0x5c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
 8001844:	e000      	b.n	8001848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000044 	.word	0x20000044
 8001854:	2000004c 	.word	0x2000004c
 8001858:	20000048 	.word	0x20000048

0800185c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_IncTick+0x1c>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_IncTick+0x20>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4413      	add	r3, r2
 800186c:	4a03      	ldr	r2, [pc, #12]	; (800187c <HAL_IncTick+0x20>)
 800186e:	6013      	str	r3, [r2, #0]
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr
 8001878:	2000004c 	.word	0x2000004c
 800187c:	2000014c 	.word	0x2000014c

08001880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b02      	ldr	r3, [pc, #8]	; (8001890 <HAL_GetTick+0x10>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	bc80      	pop	{r7}
 800188e:	4770      	bx	lr
 8001890:	2000014c 	.word	0x2000014c

08001894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018c6:	4a04      	ldr	r2, [pc, #16]	; (80018d8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	60d3      	str	r3, [r2, #12]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <__NVIC_GetPriorityGrouping+0x18>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	f003 0307 	and.w	r3, r3, #7
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bc80      	pop	{r7}
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	2b00      	cmp	r3, #0
 8001908:	db0b      	blt.n	8001922 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	f003 021f 	and.w	r2, r3, #31
 8001910:	4906      	ldr	r1, [pc, #24]	; (800192c <__NVIC_EnableIRQ+0x34>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	095b      	lsrs	r3, r3, #5
 8001918:	2001      	movs	r0, #1
 800191a:	fa00 f202 	lsl.w	r2, r0, r2
 800191e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001922:	bf00      	nop
 8001924:	370c      	adds	r7, #12
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100

08001930 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	6039      	str	r1, [r7, #0]
 800193a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	db0a      	blt.n	800195a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	b2da      	uxtb	r2, r3
 8001948:	490c      	ldr	r1, [pc, #48]	; (800197c <__NVIC_SetPriority+0x4c>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	0112      	lsls	r2, r2, #4
 8001950:	b2d2      	uxtb	r2, r2
 8001952:	440b      	add	r3, r1
 8001954:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001958:	e00a      	b.n	8001970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4908      	ldr	r1, [pc, #32]	; (8001980 <__NVIC_SetPriority+0x50>)
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	3b04      	subs	r3, #4
 8001968:	0112      	lsls	r2, r2, #4
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	440b      	add	r3, r1
 800196e:	761a      	strb	r2, [r3, #24]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	; 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f1c3 0307 	rsb	r3, r3, #7
 800199e:	2b04      	cmp	r3, #4
 80019a0:	bf28      	it	cs
 80019a2:	2304      	movcs	r3, #4
 80019a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	3304      	adds	r3, #4
 80019aa:	2b06      	cmp	r3, #6
 80019ac:	d902      	bls.n	80019b4 <NVIC_EncodePriority+0x30>
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	3b03      	subs	r3, #3
 80019b2:	e000      	b.n	80019b6 <NVIC_EncodePriority+0x32>
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	43da      	mvns	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	401a      	ands	r2, r3
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019cc:	f04f 31ff 	mov.w	r1, #4294967295
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	43d9      	mvns	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019dc:	4313      	orrs	r3, r2
         );
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3724      	adds	r7, #36	; 0x24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f8:	d301      	bcc.n	80019fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019fa:	2301      	movs	r3, #1
 80019fc:	e00f      	b.n	8001a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fe:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <SysTick_Config+0x40>)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a06:	210f      	movs	r1, #15
 8001a08:	f04f 30ff 	mov.w	r0, #4294967295
 8001a0c:	f7ff ff90 	bl	8001930 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <SysTick_Config+0x40>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a16:	4b04      	ldr	r3, [pc, #16]	; (8001a28 <SysTick_Config+0x40>)
 8001a18:	2207      	movs	r2, #7
 8001a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	e000e010 	.word	0xe000e010

08001a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ff2d 	bl	8001894 <__NVIC_SetPriorityGrouping>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b086      	sub	sp, #24
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
 8001a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a54:	f7ff ff42 	bl	80018dc <__NVIC_GetPriorityGrouping>
 8001a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	68b9      	ldr	r1, [r7, #8]
 8001a5e:	6978      	ldr	r0, [r7, #20]
 8001a60:	f7ff ff90 	bl	8001984 <NVIC_EncodePriority>
 8001a64:	4602      	mov	r2, r0
 8001a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff ff5f 	bl	8001930 <__NVIC_SetPriority>
}
 8001a72:	bf00      	nop
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	4603      	mov	r3, r0
 8001a82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ff35 	bl	80018f8 <__NVIC_EnableIRQ>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b082      	sub	sp, #8
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7ff ffa2 	bl	80019e8 <SysTick_Config>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b08b      	sub	sp, #44	; 0x2c
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac2:	e148      	b.n	8001d56 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69fa      	ldr	r2, [r7, #28]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	f040 8137 	bne.w	8001d50 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4aa3      	ldr	r2, [pc, #652]	; (8001d74 <HAL_GPIO_Init+0x2c4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d05e      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001aec:	4aa1      	ldr	r2, [pc, #644]	; (8001d74 <HAL_GPIO_Init+0x2c4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d875      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001af2:	4aa1      	ldr	r2, [pc, #644]	; (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d058      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001af8:	4a9f      	ldr	r2, [pc, #636]	; (8001d78 <HAL_GPIO_Init+0x2c8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d86f      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001afe:	4a9f      	ldr	r2, [pc, #636]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d052      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b04:	4a9d      	ldr	r2, [pc, #628]	; (8001d7c <HAL_GPIO_Init+0x2cc>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d869      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b0a:	4a9d      	ldr	r2, [pc, #628]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04c      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b10:	4a9b      	ldr	r2, [pc, #620]	; (8001d80 <HAL_GPIO_Init+0x2d0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d863      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b16:	4a9b      	ldr	r2, [pc, #620]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d046      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
 8001b1c:	4a99      	ldr	r2, [pc, #612]	; (8001d84 <HAL_GPIO_Init+0x2d4>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d85d      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b22:	2b12      	cmp	r3, #18
 8001b24:	d82a      	bhi.n	8001b7c <HAL_GPIO_Init+0xcc>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d859      	bhi.n	8001bde <HAL_GPIO_Init+0x12e>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <HAL_GPIO_Init+0x80>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001b85 	.word	0x08001b85
 8001b38:	08001b97 	.word	0x08001b97
 8001b3c:	08001bd9 	.word	0x08001bd9
 8001b40:	08001bdf 	.word	0x08001bdf
 8001b44:	08001bdf 	.word	0x08001bdf
 8001b48:	08001bdf 	.word	0x08001bdf
 8001b4c:	08001bdf 	.word	0x08001bdf
 8001b50:	08001bdf 	.word	0x08001bdf
 8001b54:	08001bdf 	.word	0x08001bdf
 8001b58:	08001bdf 	.word	0x08001bdf
 8001b5c:	08001bdf 	.word	0x08001bdf
 8001b60:	08001bdf 	.word	0x08001bdf
 8001b64:	08001bdf 	.word	0x08001bdf
 8001b68:	08001bdf 	.word	0x08001bdf
 8001b6c:	08001bdf 	.word	0x08001bdf
 8001b70:	08001bdf 	.word	0x08001bdf
 8001b74:	08001b8d 	.word	0x08001b8d
 8001b78:	08001ba1 	.word	0x08001ba1
 8001b7c:	4a82      	ldr	r2, [pc, #520]	; (8001d88 <HAL_GPIO_Init+0x2d8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d013      	beq.n	8001baa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b82:	e02c      	b.n	8001bde <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	623b      	str	r3, [r7, #32]
          break;
 8001b8a:	e029      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	3304      	adds	r3, #4
 8001b92:	623b      	str	r3, [r7, #32]
          break;
 8001b94:	e024      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	3308      	adds	r3, #8
 8001b9c:	623b      	str	r3, [r7, #32]
          break;
 8001b9e:	e01f      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	330c      	adds	r3, #12
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e01a      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	623b      	str	r3, [r7, #32]
          break;
 8001bb6:	e013      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	611a      	str	r2, [r3, #16]
          break;
 8001bca:	e009      	b.n	8001be0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bcc:	2308      	movs	r3, #8
 8001bce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	615a      	str	r2, [r3, #20]
          break;
 8001bd6:	e003      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e000      	b.n	8001be0 <HAL_GPIO_Init+0x130>
          break;
 8001bde:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2bff      	cmp	r3, #255	; 0xff
 8001be4:	d801      	bhi.n	8001bea <HAL_GPIO_Init+0x13a>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	e001      	b.n	8001bee <HAL_GPIO_Init+0x13e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3304      	adds	r3, #4
 8001bee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	2bff      	cmp	r3, #255	; 0xff
 8001bf4:	d802      	bhi.n	8001bfc <HAL_GPIO_Init+0x14c>
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	e002      	b.n	8001c02 <HAL_GPIO_Init+0x152>
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfe:	3b08      	subs	r3, #8
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	210f      	movs	r1, #15
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	6a39      	ldr	r1, [r7, #32]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8090 	beq.w	8001d50 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c30:	4b56      	ldr	r3, [pc, #344]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	4a55      	ldr	r2, [pc, #340]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	6193      	str	r3, [r2, #24]
 8001c3c:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_GPIO_Init+0x2dc>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	60bb      	str	r3, [r7, #8]
 8001c46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	089b      	lsrs	r3, r3, #2
 8001c4e:	3302      	adds	r3, #2
 8001c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4a49      	ldr	r2, [pc, #292]	; (8001d94 <HAL_GPIO_Init+0x2e4>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d00d      	beq.n	8001c90 <HAL_GPIO_Init+0x1e0>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a48      	ldr	r2, [pc, #288]	; (8001d98 <HAL_GPIO_Init+0x2e8>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d007      	beq.n	8001c8c <HAL_GPIO_Init+0x1dc>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4a47      	ldr	r2, [pc, #284]	; (8001d9c <HAL_GPIO_Init+0x2ec>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d101      	bne.n	8001c88 <HAL_GPIO_Init+0x1d8>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1e2>
 8001c90:	2300      	movs	r3, #0
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ca2:	493b      	ldr	r1, [pc, #236]	; (8001d90 <HAL_GPIO_Init+0x2e0>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cca:	4b35      	ldr	r3, [pc, #212]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4933      	ldr	r1, [pc, #204]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce4:	4b2e      	ldr	r3, [pc, #184]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	492d      	ldr	r1, [pc, #180]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf2:	4b2b      	ldr	r3, [pc, #172]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	4929      	ldr	r1, [pc, #164]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4923      	ldr	r1, [pc, #140]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	491f      	ldr	r1, [pc, #124]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4919      	ldr	r1, [pc, #100]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4915      	ldr	r1, [pc, #84]	; (8001da0 <HAL_GPIO_Init+0x2f0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d52:	3301      	adds	r3, #1
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f aeaf 	bne.w	8001ac4 <HAL_GPIO_Init+0x14>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	372c      	adds	r7, #44	; 0x2c
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	10320000 	.word	0x10320000
 8001d78:	10310000 	.word	0x10310000
 8001d7c:	10220000 	.word	0x10220000
 8001d80:	10210000 	.word	0x10210000
 8001d84:	10120000 	.word	0x10120000
 8001d88:	10110000 	.word	0x10110000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40010800 	.word	0x40010800
 8001d98:	40010c00 	.word	0x40010c00
 8001d9c:	40011000 	.word	0x40011000
 8001da0:	40010400 	.word	0x40010400

08001da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	460b      	mov	r3, r1
 8001dae:	807b      	strh	r3, [r7, #2]
 8001db0:	4613      	mov	r3, r2
 8001db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001db4:	787b      	ldrb	r3, [r7, #1]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dba:	887a      	ldrh	r2, [r7, #2]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dc0:	e003      	b.n	8001dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dc2:	887b      	ldrh	r3, [r7, #2]
 8001dc4:	041a      	lsls	r2, r3, #16
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e26c      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001df4:	4b92      	ldr	r3, [pc, #584]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d00c      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e00:	4b8f      	ldr	r3, [pc, #572]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d112      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
 8001e0c:	4b8c      	ldr	r3, [pc, #560]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e18:	d10b      	bne.n	8001e32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d06c      	beq.n	8001f00 <HAL_RCC_OscConfig+0x12c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d168      	bne.n	8001f00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e246      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x76>
 8001e3c:	4b80      	ldr	r3, [pc, #512]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7f      	ldr	r2, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e02e      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <HAL_RCC_OscConfig+0x98>
 8001e52:	4b7b      	ldr	r3, [pc, #492]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a7a      	ldr	r2, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	4b78      	ldr	r3, [pc, #480]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a77      	ldr	r2, [pc, #476]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e01d      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e74:	d10c      	bne.n	8001e90 <HAL_RCC_OscConfig+0xbc>
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a71      	ldr	r2, [pc, #452]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b6f      	ldr	r3, [pc, #444]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a6e      	ldr	r2, [pc, #440]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e00b      	b.n	8001ea8 <HAL_RCC_OscConfig+0xd4>
 8001e90:	4b6b      	ldr	r3, [pc, #428]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a6a      	ldr	r2, [pc, #424]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	4b68      	ldr	r3, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a67      	ldr	r2, [pc, #412]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d013      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7ff fce6 	bl	8001880 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fce2 	bl	8001880 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b64      	cmp	r3, #100	; 0x64
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e1fa      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eca:	4b5d      	ldr	r3, [pc, #372]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0xe4>
 8001ed6:	e014      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fcd2 	bl	8001880 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fcce 	bl	8001880 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1e6      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef2:	4b53      	ldr	r3, [pc, #332]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d1f0      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x10c>
 8001efe:	e000      	b.n	8001f02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d063      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0e:	4b4c      	ldr	r3, [pc, #304]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00b      	beq.n	8001f32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
 8001f26:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d116      	bne.n	8001f60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f32:	4b43      	ldr	r3, [pc, #268]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	691b      	ldr	r3, [r3, #16]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1ba      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4939      	ldr	r1, [pc, #228]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	e03a      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d020      	beq.n	8001faa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f68:	4b36      	ldr	r3, [pc, #216]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6e:	f7ff fc87 	bl	8001880 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f76:	f7ff fc83 	bl	8001880 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e19b      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	4b2d      	ldr	r3, [pc, #180]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4927      	ldr	r1, [pc, #156]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	600b      	str	r3, [r1, #0]
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001faa:	4b26      	ldr	r3, [pc, #152]	; (8002044 <HAL_RCC_OscConfig+0x270>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fc66 	bl	8001880 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fc62 	bl	8001880 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e17a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d03a      	beq.n	8002058 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d019      	beq.n	800201e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fea:	4b17      	ldr	r3, [pc, #92]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fc46 	bl	8001880 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff8:	f7ff fc42 	bl	8001880 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e15a      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_OscConfig+0x26c>)
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002016:	2001      	movs	r0, #1
 8002018:	f000 fa9a 	bl	8002550 <RCC_Delay>
 800201c:	e01c      	b.n	8002058 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_RCC_OscConfig+0x274>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002024:	f7ff fc2c 	bl	8001880 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800202a:	e00f      	b.n	800204c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202c:	f7ff fc28 	bl	8001880 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d908      	bls.n	800204c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e140      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	42420000 	.word	0x42420000
 8002048:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	4b9e      	ldr	r3, [pc, #632]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1e9      	bne.n	800202c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80a6 	beq.w	80021b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800206a:	4b97      	ldr	r3, [pc, #604]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10d      	bne.n	8002092 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b94      	ldr	r3, [pc, #592]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	69db      	ldr	r3, [r3, #28]
 800207a:	4a93      	ldr	r2, [pc, #588]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800207c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002080:	61d3      	str	r3, [r2, #28]
 8002082:	4b91      	ldr	r3, [pc, #580]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800208e:	2301      	movs	r3, #1
 8002090:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b8e      	ldr	r3, [pc, #568]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800209e:	4b8b      	ldr	r3, [pc, #556]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a8a      	ldr	r2, [pc, #552]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020aa:	f7ff fbe9 	bl	8001880 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020b2:	f7ff fbe5 	bl	8001880 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b64      	cmp	r3, #100	; 0x64
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0fd      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c4:	4b81      	ldr	r3, [pc, #516]	; (80022cc <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d106      	bne.n	80020e6 <HAL_RCC_OscConfig+0x312>
 80020d8:	4b7b      	ldr	r3, [pc, #492]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4a7a      	ldr	r2, [pc, #488]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020de:	f043 0301 	orr.w	r3, r3, #1
 80020e2:	6213      	str	r3, [r2, #32]
 80020e4:	e02d      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10c      	bne.n	8002108 <HAL_RCC_OscConfig+0x334>
 80020ee:	4b76      	ldr	r3, [pc, #472]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a75      	ldr	r2, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020f4:	f023 0301 	bic.w	r3, r3, #1
 80020f8:	6213      	str	r3, [r2, #32]
 80020fa:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80020fc:	6a1b      	ldr	r3, [r3, #32]
 80020fe:	4a72      	ldr	r2, [pc, #456]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	f023 0304 	bic.w	r3, r3, #4
 8002104:	6213      	str	r3, [r2, #32]
 8002106:	e01c      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d10c      	bne.n	800212a <HAL_RCC_OscConfig+0x356>
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002112:	6a1b      	ldr	r3, [r3, #32]
 8002114:	4a6c      	ldr	r2, [pc, #432]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	6213      	str	r3, [r2, #32]
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	6213      	str	r3, [r2, #32]
 8002128:	e00b      	b.n	8002142 <HAL_RCC_OscConfig+0x36e>
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a66      	ldr	r2, [pc, #408]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b64      	ldr	r3, [pc, #400]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a63      	ldr	r2, [pc, #396]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d015      	beq.n	8002176 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214a:	f7ff fb99 	bl	8001880 <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	e00a      	b.n	8002168 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002152:	f7ff fb95 	bl	8001880 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002160:	4293      	cmp	r3, r2
 8002162:	d901      	bls.n	8002168 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002164:	2303      	movs	r3, #3
 8002166:	e0ab      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	4b57      	ldr	r3, [pc, #348]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	f003 0302 	and.w	r3, r3, #2
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0ee      	beq.n	8002152 <HAL_RCC_OscConfig+0x37e>
 8002174:	e014      	b.n	80021a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb83 	bl	8001880 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7ff fb7f 	bl	8001880 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e095      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	4b4c      	ldr	r3, [pc, #304]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1ee      	bne.n	800217e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021a0:	7dfb      	ldrb	r3, [r7, #23]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d105      	bne.n	80021b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	4a47      	ldr	r2, [pc, #284]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8081 	beq.w	80022be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021bc:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d061      	beq.n	800228c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d146      	bne.n	800225e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d6:	f7ff fb53 	bl	8001880 <HAL_GetTick>
 80021da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021de:	f7ff fb4f 	bl	8001880 <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e067      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002204:	d108      	bne.n	8002218 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002206:	4b30      	ldr	r3, [pc, #192]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	492d      	ldr	r1, [pc, #180]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002218:	4b2b      	ldr	r3, [pc, #172]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a19      	ldr	r1, [r3, #32]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	430b      	orrs	r3, r1
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002230:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002232:	2201      	movs	r2, #1
 8002234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff fb23 	bl	8001880 <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7ff fb1f 	bl	8001880 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e037      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x46a>
 800225c:	e02f      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_RCC_OscConfig+0x4fc>)
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002264:	f7ff fb0c 	bl	8001880 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226c:	f7ff fb08 	bl	8001880 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e020      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x498>
 800228a:	e018      	b.n	80022be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d101      	bne.n	8002298 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e013      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_OscConfig+0x4f4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d001      	beq.n	80022be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3718      	adds	r7, #24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	42420060 	.word	0x42420060

080022d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0d0      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d910      	bls.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b67      	ldr	r3, [pc, #412]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 0207 	bic.w	r2, r3, #7
 80022fe:	4965      	ldr	r1, [pc, #404]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d001      	beq.n	8002318 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0b8      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d020      	beq.n	8002366 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d005      	beq.n	800233c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002330:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a58      	ldr	r2, [pc, #352]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800233a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0308 	and.w	r3, r3, #8
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002348:	4b53      	ldr	r3, [pc, #332]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a52      	ldr	r2, [pc, #328]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002352:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b50      	ldr	r3, [pc, #320]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	494d      	ldr	r1, [pc, #308]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d040      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	4b47      	ldr	r3, [pc, #284]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d115      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07f      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002392:	4b41      	ldr	r3, [pc, #260]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d109      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e073      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a2:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e06b      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023b2:	4b39      	ldr	r3, [pc, #228]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f023 0203 	bic.w	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023c4:	f7ff fa5c 	bl	8001880 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	e00a      	b.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023cc:	f7ff fa58 	bl	8001880 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e053      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f003 020c 	and.w	r2, r3, #12
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1eb      	bne.n	80023cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e032      	b.n	800248a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4916      	ldr	r1, [pc, #88]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800244e:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	490e      	ldr	r1, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002462:	f000 f821 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490a      	ldr	r1, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x1c8>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	fa22 f303 	lsr.w	r3, r2, r3
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800247e:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_ClockConfig+0x1d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f9ba 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40022000 	.word	0x40022000
 8002498:	40021000 	.word	0x40021000
 800249c:	08003ce0 	.word	0x08003ce0
 80024a0:	20000044 	.word	0x20000044
 80024a4:	20000048 	.word	0x20000048

080024a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	2300      	movs	r3, #0
 80024b8:	617b      	str	r3, [r7, #20]
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	; (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x30>
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d003      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x36>
 80024d6:	e027      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 80024da:	613b      	str	r3, [r7, #16]
      break;
 80024dc:	e027      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	0c9b      	lsrs	r3, r3, #18
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	4a17      	ldr	r2, [pc, #92]	; (8002544 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024e8:	5cd3      	ldrb	r3, [r2, r3]
 80024ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_RCC_GetSysClockFreq+0x94>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	0c5b      	lsrs	r3, r3, #17
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	4a11      	ldr	r2, [pc, #68]	; (8002548 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a0d      	ldr	r2, [pc, #52]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800250a:	fb02 f203 	mul.w	r2, r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	fbb2 f3f3 	udiv	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	e004      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a0c      	ldr	r2, [pc, #48]	; (800254c <HAL_RCC_GetSysClockFreq+0xa4>)
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	613b      	str	r3, [r7, #16]
      break;
 8002526:	e002      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetSysClockFreq+0x98>)
 800252a:	613b      	str	r3, [r7, #16]
      break;
 800252c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252e:	693b      	ldr	r3, [r7, #16]
}
 8002530:	4618      	mov	r0, r3
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	08003cf0 	.word	0x08003cf0
 8002548:	08003d00 	.word	0x08003d00
 800254c:	003d0900 	.word	0x003d0900

08002550 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002558:	4b0a      	ldr	r3, [pc, #40]	; (8002584 <RCC_Delay+0x34>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <RCC_Delay+0x38>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0a5b      	lsrs	r3, r3, #9
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	fb02 f303 	mul.w	r3, r2, r3
 800256a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800256c:	bf00      	nop
  }
  while (Delay --);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	60fa      	str	r2, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1f9      	bne.n	800256c <RCC_Delay+0x1c>
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	20000044 	.word	0x20000044
 8002588:	10624dd3 	.word	0x10624dd3

0800258c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e041      	b.n	8002622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff f88a 	bl	80016cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 fa56 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
	...

0800262c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b01      	cmp	r3, #1
 800263e:	d001      	beq.n	8002644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e035      	b.n	80026b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0201 	orr.w	r2, r2, #1
 800265a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <HAL_TIM_Base_Start_IT+0x90>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d009      	beq.n	800267a <HAL_TIM_Base_Start_IT+0x4e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800266e:	d004      	beq.n	800267a <HAL_TIM_Base_Start_IT+0x4e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a12      	ldr	r2, [pc, #72]	; (80026c0 <HAL_TIM_Base_Start_IT+0x94>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b06      	cmp	r3, #6
 800268a:	d010      	beq.n	80026ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e007      	b.n	80026ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ae:	2300      	movs	r3, #0
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d020      	beq.n	8002728 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0202 	mvn.w	r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f998 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f98b 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f99a 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d020      	beq.n	8002774 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01b      	beq.n	8002774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0204 	mvn.w	r2, #4
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f972 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f965 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f974 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d020      	beq.n	80027c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0308 	and.w	r3, r3, #8
 8002784:	2b00      	cmp	r3, #0
 8002786:	d01b      	beq.n	80027c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0208 	mvn.w	r2, #8
 8002790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2204      	movs	r2, #4
 8002796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d003      	beq.n	80027ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f94c 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027ac:	e005      	b.n	80027ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f93f 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 f94e 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f003 0310 	and.w	r3, r3, #16
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d020      	beq.n	800280c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01b      	beq.n	800280c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f06f 0210 	mvn.w	r2, #16
 80027dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2208      	movs	r2, #8
 80027e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f926 	bl	8002a44 <HAL_TIM_IC_CaptureCallback>
 80027f8:	e005      	b.n	8002806 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f919 	bl	8002a32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f928 	bl	8002a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d00c      	beq.n	8002830 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d007      	beq.n	8002830 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0201 	mvn.w	r2, #1
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe fa58 	bl	8000ce0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800284c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fa6f 	bl	8002d32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00c      	beq.n	8002878 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8f8 	bl	8002a68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f003 0320 	and.w	r3, r3, #32
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00c      	beq.n	800289c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 0320 	and.w	r3, r3, #32
 8002888:	2b00      	cmp	r3, #0
 800288a:	d007      	beq.n	800289c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0220 	mvn.w	r2, #32
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa42 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ae:	2300      	movs	r3, #0
 80028b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x1c>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0b4      	b.n	8002a2a <HAL_TIM_ConfigClockSource+0x186>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f8:	d03e      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0xd4>
 80028fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028fe:	f200 8087 	bhi.w	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002902:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002906:	f000 8086 	beq.w	8002a16 <HAL_TIM_ConfigClockSource+0x172>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	d87f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b70      	cmp	r3, #112	; 0x70
 8002912:	d01a      	beq.n	800294a <HAL_TIM_ConfigClockSource+0xa6>
 8002914:	2b70      	cmp	r3, #112	; 0x70
 8002916:	d87b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b60      	cmp	r3, #96	; 0x60
 800291a:	d050      	beq.n	80029be <HAL_TIM_ConfigClockSource+0x11a>
 800291c:	2b60      	cmp	r3, #96	; 0x60
 800291e:	d877      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002920:	2b50      	cmp	r3, #80	; 0x50
 8002922:	d03c      	beq.n	800299e <HAL_TIM_ConfigClockSource+0xfa>
 8002924:	2b50      	cmp	r3, #80	; 0x50
 8002926:	d873      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002928:	2b40      	cmp	r3, #64	; 0x40
 800292a:	d058      	beq.n	80029de <HAL_TIM_ConfigClockSource+0x13a>
 800292c:	2b40      	cmp	r3, #64	; 0x40
 800292e:	d86f      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002930:	2b30      	cmp	r3, #48	; 0x30
 8002932:	d064      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002934:	2b30      	cmp	r3, #48	; 0x30
 8002936:	d86b      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b20      	cmp	r3, #32
 800293a:	d060      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 800293c:	2b20      	cmp	r3, #32
 800293e:	d867      	bhi.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b00      	cmp	r3, #0
 8002942:	d05c      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002944:	2b10      	cmp	r3, #16
 8002946:	d05a      	beq.n	80029fe <HAL_TIM_ConfigClockSource+0x15a>
 8002948:	e062      	b.n	8002a10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	6899      	ldr	r1, [r3, #8]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685a      	ldr	r2, [r3, #4]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f000 f96a 	bl	8002c32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800296c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	609a      	str	r2, [r3, #8]
      break;
 8002976:	e04f      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6899      	ldr	r1, [r3, #8]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f000 f953 	bl	8002c32 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800299a:	609a      	str	r2, [r3, #8]
      break;
 800299c:	e03c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6859      	ldr	r1, [r3, #4]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	461a      	mov	r2, r3
 80029ac:	f000 f8ca 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2150      	movs	r1, #80	; 0x50
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 f921 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029bc:	e02c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	6859      	ldr	r1, [r3, #4]
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	461a      	mov	r2, r3
 80029cc:	f000 f8e8 	bl	8002ba0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2160      	movs	r1, #96	; 0x60
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f911 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029dc:	e01c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f000 f8aa 	bl	8002b44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2140      	movs	r1, #64	; 0x40
 80029f6:	4618      	mov	r0, r3
 80029f8:	f000 f901 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 80029fc:	e00c      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4619      	mov	r1, r3
 8002a08:	4610      	mov	r0, r2
 8002a0a:	f000 f8f8 	bl	8002bfe <TIM_ITRx_SetConfig>
      break;
 8002a0e:	e003      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      break;
 8002a14:	e000      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bc80      	pop	{r7}
 8002a66:	4770      	bx	lr

08002a68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bc80      	pop	{r7}
 8002a78:	4770      	bx	lr
	...

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a2b      	ldr	r2, [pc, #172]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d007      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d003      	beq.n	8002aa4 <TIM_Base_SetConfig+0x28>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a28      	ldr	r2, [pc, #160]	; (8002b40 <TIM_Base_SetConfig+0xc4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d108      	bne.n	8002ab6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d007      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d003      	beq.n	8002ace <TIM_Base_SetConfig+0x52>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <TIM_Base_SetConfig+0xc4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d108      	bne.n	8002ae0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <TIM_Base_SetConfig+0xc0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f023 0201 	bic.w	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]
  }
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	40012c00 	.word	0x40012c00
 8002b40:	40000400 	.word	0x40000400

08002b44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
 8002b80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	693a      	ldr	r2, [r7, #16]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b087      	sub	sp, #28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	f023 0210 	bic.w	r2, r3, #16
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	031b      	lsls	r3, r3, #12
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	621a      	str	r2, [r3, #32]
}
 8002bf4:	bf00      	nop
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f043 0307 	orr.w	r3, r3, #7
 8002c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b087      	sub	sp, #28
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	021a      	lsls	r2, r3, #8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	431a      	orrs	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	609a      	str	r2, [r3, #8]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bc80      	pop	{r7}
 8002c6e:	4770      	bx	lr

08002c70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d101      	bne.n	8002c88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c84:	2302      	movs	r3, #2
 8002c86:	e041      	b.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a14      	ldr	r2, [pc, #80]	; (8002d18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d009      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd4:	d004      	beq.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a10      	ldr	r2, [pc, #64]	; (8002d1c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10c      	bne.n	8002cfa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40012c00 	.word	0x40012c00
 8002d1c:	40000400 	.word	0x40000400

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <__errno>:
 8002d44:	4b01      	ldr	r3, [pc, #4]	; (8002d4c <__errno+0x8>)
 8002d46:	6818      	ldr	r0, [r3, #0]
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000050 	.word	0x20000050

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	2600      	movs	r6, #0
 8002d54:	4d0c      	ldr	r5, [pc, #48]	; (8002d88 <__libc_init_array+0x38>)
 8002d56:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d58:	1b64      	subs	r4, r4, r5
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	42a6      	cmp	r6, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	f000 ffb0 	bl	8003cc4 <_init>
 8002d64:	2600      	movs	r6, #0
 8002d66:	4d0a      	ldr	r5, [pc, #40]	; (8002d90 <__libc_init_array+0x40>)
 8002d68:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <__libc_init_array+0x44>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	42a6      	cmp	r6, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d78:	4798      	blx	r3
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d82:	4798      	blx	r3
 8002d84:	3601      	adds	r6, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	08003d48 	.word	0x08003d48
 8002d8c:	08003d48 	.word	0x08003d48
 8002d90:	08003d48 	.word	0x08003d48
 8002d94:	08003d4c 	.word	0x08003d4c

08002d98 <memset>:
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	f803 1b01 	strb.w	r1, [r3], #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <pow>:
 8002da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002dac:	461f      	mov	r7, r3
 8002dae:	4680      	mov	r8, r0
 8002db0:	4689      	mov	r9, r1
 8002db2:	4616      	mov	r6, r2
 8002db4:	f000 f8a4 	bl	8002f00 <__ieee754_pow>
 8002db8:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <pow+0x148>)
 8002dba:	4604      	mov	r4, r0
 8002dbc:	f993 3000 	ldrsb.w	r3, [r3]
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	d015      	beq.n	8002df2 <pow+0x4a>
 8002dc6:	4632      	mov	r2, r6
 8002dc8:	463b      	mov	r3, r7
 8002dca:	4630      	mov	r0, r6
 8002dcc:	4639      	mov	r1, r7
 8002dce:	f7fd fe15 	bl	80009fc <__aeabi_dcmpun>
 8002dd2:	b970      	cbnz	r0, 8002df2 <pow+0x4a>
 8002dd4:	4642      	mov	r2, r8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	4640      	mov	r0, r8
 8002dda:	4649      	mov	r1, r9
 8002ddc:	f7fd fe0e 	bl	80009fc <__aeabi_dcmpun>
 8002de0:	2200      	movs	r2, #0
 8002de2:	2300      	movs	r3, #0
 8002de4:	b148      	cbz	r0, 8002dfa <pow+0x52>
 8002de6:	4630      	mov	r0, r6
 8002de8:	4639      	mov	r1, r7
 8002dea:	f7fd fdd5 	bl	8000998 <__aeabi_dcmpeq>
 8002dee:	2800      	cmp	r0, #0
 8002df0:	d17b      	bne.n	8002eea <pow+0x142>
 8002df2:	4620      	mov	r0, r4
 8002df4:	4629      	mov	r1, r5
 8002df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	4640      	mov	r0, r8
 8002dfc:	4649      	mov	r1, r9
 8002dfe:	f7fd fdcb 	bl	8000998 <__aeabi_dcmpeq>
 8002e02:	b1e0      	cbz	r0, 8002e3e <pow+0x96>
 8002e04:	2200      	movs	r2, #0
 8002e06:	2300      	movs	r3, #0
 8002e08:	4630      	mov	r0, r6
 8002e0a:	4639      	mov	r1, r7
 8002e0c:	f7fd fdc4 	bl	8000998 <__aeabi_dcmpeq>
 8002e10:	2800      	cmp	r0, #0
 8002e12:	d16a      	bne.n	8002eea <pow+0x142>
 8002e14:	4630      	mov	r0, r6
 8002e16:	4639      	mov	r1, r7
 8002e18:	f000 fe37 	bl	8003a8a <finite>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0e8      	beq.n	8002df2 <pow+0x4a>
 8002e20:	2200      	movs	r2, #0
 8002e22:	2300      	movs	r3, #0
 8002e24:	4630      	mov	r0, r6
 8002e26:	4639      	mov	r1, r7
 8002e28:	f7fd fdc0 	bl	80009ac <__aeabi_dcmplt>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d0e0      	beq.n	8002df2 <pow+0x4a>
 8002e30:	f7ff ff88 	bl	8002d44 <__errno>
 8002e34:	2321      	movs	r3, #33	; 0x21
 8002e36:	2400      	movs	r4, #0
 8002e38:	6003      	str	r3, [r0, #0]
 8002e3a:	4d2e      	ldr	r5, [pc, #184]	; (8002ef4 <pow+0x14c>)
 8002e3c:	e7d9      	b.n	8002df2 <pow+0x4a>
 8002e3e:	4620      	mov	r0, r4
 8002e40:	4629      	mov	r1, r5
 8002e42:	f000 fe22 	bl	8003a8a <finite>
 8002e46:	bba8      	cbnz	r0, 8002eb4 <pow+0x10c>
 8002e48:	4640      	mov	r0, r8
 8002e4a:	4649      	mov	r1, r9
 8002e4c:	f000 fe1d 	bl	8003a8a <finite>
 8002e50:	b380      	cbz	r0, 8002eb4 <pow+0x10c>
 8002e52:	4630      	mov	r0, r6
 8002e54:	4639      	mov	r1, r7
 8002e56:	f000 fe18 	bl	8003a8a <finite>
 8002e5a:	b358      	cbz	r0, 8002eb4 <pow+0x10c>
 8002e5c:	4622      	mov	r2, r4
 8002e5e:	462b      	mov	r3, r5
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fdca 	bl	80009fc <__aeabi_dcmpun>
 8002e68:	b160      	cbz	r0, 8002e84 <pow+0xdc>
 8002e6a:	f7ff ff6b 	bl	8002d44 <__errno>
 8002e6e:	2321      	movs	r3, #33	; 0x21
 8002e70:	2200      	movs	r2, #0
 8002e72:	6003      	str	r3, [r0, #0]
 8002e74:	2300      	movs	r3, #0
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fc4f 	bl	800071c <__aeabi_ddiv>
 8002e7e:	4604      	mov	r4, r0
 8002e80:	460d      	mov	r5, r1
 8002e82:	e7b6      	b.n	8002df2 <pow+0x4a>
 8002e84:	f7ff ff5e 	bl	8002d44 <__errno>
 8002e88:	2322      	movs	r3, #34	; 0x22
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	6003      	str	r3, [r0, #0]
 8002e8e:	4649      	mov	r1, r9
 8002e90:	2300      	movs	r3, #0
 8002e92:	4640      	mov	r0, r8
 8002e94:	f7fd fd8a 	bl	80009ac <__aeabi_dcmplt>
 8002e98:	2400      	movs	r4, #0
 8002e9a:	b148      	cbz	r0, 8002eb0 <pow+0x108>
 8002e9c:	4630      	mov	r0, r6
 8002e9e:	4639      	mov	r1, r7
 8002ea0:	f000 fe00 	bl	8003aa4 <rint>
 8002ea4:	4632      	mov	r2, r6
 8002ea6:	463b      	mov	r3, r7
 8002ea8:	f7fd fd76 	bl	8000998 <__aeabi_dcmpeq>
 8002eac:	2800      	cmp	r0, #0
 8002eae:	d0c4      	beq.n	8002e3a <pow+0x92>
 8002eb0:	4d11      	ldr	r5, [pc, #68]	; (8002ef8 <pow+0x150>)
 8002eb2:	e79e      	b.n	8002df2 <pow+0x4a>
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fd6c 	bl	8000998 <__aeabi_dcmpeq>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	d096      	beq.n	8002df2 <pow+0x4a>
 8002ec4:	4640      	mov	r0, r8
 8002ec6:	4649      	mov	r1, r9
 8002ec8:	f000 fddf 	bl	8003a8a <finite>
 8002ecc:	2800      	cmp	r0, #0
 8002ece:	d090      	beq.n	8002df2 <pow+0x4a>
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	4639      	mov	r1, r7
 8002ed4:	f000 fdd9 	bl	8003a8a <finite>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	d08a      	beq.n	8002df2 <pow+0x4a>
 8002edc:	f7ff ff32 	bl	8002d44 <__errno>
 8002ee0:	2322      	movs	r3, #34	; 0x22
 8002ee2:	2400      	movs	r4, #0
 8002ee4:	2500      	movs	r5, #0
 8002ee6:	6003      	str	r3, [r0, #0]
 8002ee8:	e783      	b.n	8002df2 <pow+0x4a>
 8002eea:	2400      	movs	r4, #0
 8002eec:	4d03      	ldr	r5, [pc, #12]	; (8002efc <pow+0x154>)
 8002eee:	e780      	b.n	8002df2 <pow+0x4a>
 8002ef0:	200000b4 	.word	0x200000b4
 8002ef4:	fff00000 	.word	0xfff00000
 8002ef8:	7ff00000 	.word	0x7ff00000
 8002efc:	3ff00000 	.word	0x3ff00000

08002f00 <__ieee754_pow>:
 8002f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f04:	b093      	sub	sp, #76	; 0x4c
 8002f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f0a:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8002f0e:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8002f12:	ea55 0302 	orrs.w	r3, r5, r2
 8002f16:	4607      	mov	r7, r0
 8002f18:	4688      	mov	r8, r1
 8002f1a:	f000 84bf 	beq.w	800389c <__ieee754_pow+0x99c>
 8002f1e:	4b7e      	ldr	r3, [pc, #504]	; (8003118 <__ieee754_pow+0x218>)
 8002f20:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002f24:	429c      	cmp	r4, r3
 8002f26:	4689      	mov	r9, r1
 8002f28:	4682      	mov	sl, r0
 8002f2a:	dc09      	bgt.n	8002f40 <__ieee754_pow+0x40>
 8002f2c:	d103      	bne.n	8002f36 <__ieee754_pow+0x36>
 8002f2e:	b978      	cbnz	r0, 8002f50 <__ieee754_pow+0x50>
 8002f30:	42a5      	cmp	r5, r4
 8002f32:	dd02      	ble.n	8002f3a <__ieee754_pow+0x3a>
 8002f34:	e00c      	b.n	8002f50 <__ieee754_pow+0x50>
 8002f36:	429d      	cmp	r5, r3
 8002f38:	dc02      	bgt.n	8002f40 <__ieee754_pow+0x40>
 8002f3a:	429d      	cmp	r5, r3
 8002f3c:	d10e      	bne.n	8002f5c <__ieee754_pow+0x5c>
 8002f3e:	b16a      	cbz	r2, 8002f5c <__ieee754_pow+0x5c>
 8002f40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002f44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002f48:	ea54 030a 	orrs.w	r3, r4, sl
 8002f4c:	f000 84a6 	beq.w	800389c <__ieee754_pow+0x99c>
 8002f50:	4872      	ldr	r0, [pc, #456]	; (800311c <__ieee754_pow+0x21c>)
 8002f52:	b013      	add	sp, #76	; 0x4c
 8002f54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f58:	f000 bd9e 	b.w	8003a98 <nan>
 8002f5c:	f1b9 0f00 	cmp.w	r9, #0
 8002f60:	da39      	bge.n	8002fd6 <__ieee754_pow+0xd6>
 8002f62:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <__ieee754_pow+0x220>)
 8002f64:	429d      	cmp	r5, r3
 8002f66:	dc54      	bgt.n	8003012 <__ieee754_pow+0x112>
 8002f68:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002f6c:	429d      	cmp	r5, r3
 8002f6e:	f340 84a6 	ble.w	80038be <__ieee754_pow+0x9be>
 8002f72:	152b      	asrs	r3, r5, #20
 8002f74:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002f78:	2b14      	cmp	r3, #20
 8002f7a:	dd0f      	ble.n	8002f9c <__ieee754_pow+0x9c>
 8002f7c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8002f80:	fa22 f103 	lsr.w	r1, r2, r3
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	f040 8498 	bne.w	80038be <__ieee754_pow+0x9be>
 8002f8e:	f001 0101 	and.w	r1, r1, #1
 8002f92:	f1c1 0302 	rsb	r3, r1, #2
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	b182      	cbz	r2, 8002fbc <__ieee754_pow+0xbc>
 8002f9a:	e05e      	b.n	800305a <__ieee754_pow+0x15a>
 8002f9c:	2a00      	cmp	r2, #0
 8002f9e:	d15a      	bne.n	8003056 <__ieee754_pow+0x156>
 8002fa0:	f1c3 0314 	rsb	r3, r3, #20
 8002fa4:	fa45 f103 	asr.w	r1, r5, r3
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	42ab      	cmp	r3, r5
 8002fae:	f040 8483 	bne.w	80038b8 <__ieee754_pow+0x9b8>
 8002fb2:	f001 0101 	and.w	r1, r1, #1
 8002fb6:	f1c1 0302 	rsb	r3, r1, #2
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	4b59      	ldr	r3, [pc, #356]	; (8003124 <__ieee754_pow+0x224>)
 8002fbe:	429d      	cmp	r5, r3
 8002fc0:	d130      	bne.n	8003024 <__ieee754_pow+0x124>
 8002fc2:	2e00      	cmp	r6, #0
 8002fc4:	f280 8474 	bge.w	80038b0 <__ieee754_pow+0x9b0>
 8002fc8:	463a      	mov	r2, r7
 8002fca:	4643      	mov	r3, r8
 8002fcc:	2000      	movs	r0, #0
 8002fce:	4955      	ldr	r1, [pc, #340]	; (8003124 <__ieee754_pow+0x224>)
 8002fd0:	f7fd fba4 	bl	800071c <__aeabi_ddiv>
 8002fd4:	e02f      	b.n	8003036 <__ieee754_pow+0x136>
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	2a00      	cmp	r2, #0
 8002fdc:	d13d      	bne.n	800305a <__ieee754_pow+0x15a>
 8002fde:	4b4e      	ldr	r3, [pc, #312]	; (8003118 <__ieee754_pow+0x218>)
 8002fe0:	429d      	cmp	r5, r3
 8002fe2:	d1eb      	bne.n	8002fbc <__ieee754_pow+0xbc>
 8002fe4:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8002fe8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8002fec:	ea53 030a 	orrs.w	r3, r3, sl
 8002ff0:	f000 8454 	beq.w	800389c <__ieee754_pow+0x99c>
 8002ff4:	4b4c      	ldr	r3, [pc, #304]	; (8003128 <__ieee754_pow+0x228>)
 8002ff6:	429c      	cmp	r4, r3
 8002ff8:	dd0d      	ble.n	8003016 <__ieee754_pow+0x116>
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	f280 8454 	bge.w	80038a8 <__ieee754_pow+0x9a8>
 8003000:	f04f 0b00 	mov.w	fp, #0
 8003004:	f04f 0c00 	mov.w	ip, #0
 8003008:	4658      	mov	r0, fp
 800300a:	4661      	mov	r1, ip
 800300c:	b013      	add	sp, #76	; 0x4c
 800300e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003012:	2302      	movs	r3, #2
 8003014:	e7e0      	b.n	8002fd8 <__ieee754_pow+0xd8>
 8003016:	2e00      	cmp	r6, #0
 8003018:	daf2      	bge.n	8003000 <__ieee754_pow+0x100>
 800301a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800301e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8003022:	e7f1      	b.n	8003008 <__ieee754_pow+0x108>
 8003024:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8003028:	d108      	bne.n	800303c <__ieee754_pow+0x13c>
 800302a:	463a      	mov	r2, r7
 800302c:	4643      	mov	r3, r8
 800302e:	4638      	mov	r0, r7
 8003030:	4641      	mov	r1, r8
 8003032:	f7fd fa49 	bl	80004c8 <__aeabi_dmul>
 8003036:	4683      	mov	fp, r0
 8003038:	468c      	mov	ip, r1
 800303a:	e7e5      	b.n	8003008 <__ieee754_pow+0x108>
 800303c:	4b3b      	ldr	r3, [pc, #236]	; (800312c <__ieee754_pow+0x22c>)
 800303e:	429e      	cmp	r6, r3
 8003040:	d10b      	bne.n	800305a <__ieee754_pow+0x15a>
 8003042:	f1b9 0f00 	cmp.w	r9, #0
 8003046:	db08      	blt.n	800305a <__ieee754_pow+0x15a>
 8003048:	4638      	mov	r0, r7
 800304a:	4641      	mov	r1, r8
 800304c:	b013      	add	sp, #76	; 0x4c
 800304e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003052:	f000 bc6b 	b.w	800392c <__ieee754_sqrt>
 8003056:	2300      	movs	r3, #0
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	4638      	mov	r0, r7
 800305c:	4641      	mov	r1, r8
 800305e:	f000 fd11 	bl	8003a84 <fabs>
 8003062:	4683      	mov	fp, r0
 8003064:	468c      	mov	ip, r1
 8003066:	f1ba 0f00 	cmp.w	sl, #0
 800306a:	d129      	bne.n	80030c0 <__ieee754_pow+0x1c0>
 800306c:	b124      	cbz	r4, 8003078 <__ieee754_pow+0x178>
 800306e:	4b2d      	ldr	r3, [pc, #180]	; (8003124 <__ieee754_pow+0x224>)
 8003070:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8003074:	429a      	cmp	r2, r3
 8003076:	d123      	bne.n	80030c0 <__ieee754_pow+0x1c0>
 8003078:	2e00      	cmp	r6, #0
 800307a:	da07      	bge.n	800308c <__ieee754_pow+0x18c>
 800307c:	465a      	mov	r2, fp
 800307e:	4663      	mov	r3, ip
 8003080:	2000      	movs	r0, #0
 8003082:	4928      	ldr	r1, [pc, #160]	; (8003124 <__ieee754_pow+0x224>)
 8003084:	f7fd fb4a 	bl	800071c <__aeabi_ddiv>
 8003088:	4683      	mov	fp, r0
 800308a:	468c      	mov	ip, r1
 800308c:	f1b9 0f00 	cmp.w	r9, #0
 8003090:	daba      	bge.n	8003008 <__ieee754_pow+0x108>
 8003092:	9b00      	ldr	r3, [sp, #0]
 8003094:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003098:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800309c:	4323      	orrs	r3, r4
 800309e:	d108      	bne.n	80030b2 <__ieee754_pow+0x1b2>
 80030a0:	465a      	mov	r2, fp
 80030a2:	4663      	mov	r3, ip
 80030a4:	4658      	mov	r0, fp
 80030a6:	4661      	mov	r1, ip
 80030a8:	f7fd f856 	bl	8000158 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	e78e      	b.n	8002fd0 <__ieee754_pow+0xd0>
 80030b2:	9b00      	ldr	r3, [sp, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d1a7      	bne.n	8003008 <__ieee754_pow+0x108>
 80030b8:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80030bc:	469c      	mov	ip, r3
 80030be:	e7a3      	b.n	8003008 <__ieee754_pow+0x108>
 80030c0:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 80030c4:	3b01      	subs	r3, #1
 80030c6:	930c      	str	r3, [sp, #48]	; 0x30
 80030c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030ca:	9b00      	ldr	r3, [sp, #0]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	d104      	bne.n	80030da <__ieee754_pow+0x1da>
 80030d0:	463a      	mov	r2, r7
 80030d2:	4643      	mov	r3, r8
 80030d4:	4638      	mov	r0, r7
 80030d6:	4641      	mov	r1, r8
 80030d8:	e7e6      	b.n	80030a8 <__ieee754_pow+0x1a8>
 80030da:	4b15      	ldr	r3, [pc, #84]	; (8003130 <__ieee754_pow+0x230>)
 80030dc:	429d      	cmp	r5, r3
 80030de:	f340 80f9 	ble.w	80032d4 <__ieee754_pow+0x3d4>
 80030e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80030e6:	429d      	cmp	r5, r3
 80030e8:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <__ieee754_pow+0x228>)
 80030ea:	dd09      	ble.n	8003100 <__ieee754_pow+0x200>
 80030ec:	429c      	cmp	r4, r3
 80030ee:	dc0c      	bgt.n	800310a <__ieee754_pow+0x20a>
 80030f0:	2e00      	cmp	r6, #0
 80030f2:	da85      	bge.n	8003000 <__ieee754_pow+0x100>
 80030f4:	a306      	add	r3, pc, #24	; (adr r3, 8003110 <__ieee754_pow+0x210>)
 80030f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	e798      	b.n	8003032 <__ieee754_pow+0x132>
 8003100:	429c      	cmp	r4, r3
 8003102:	dbf5      	blt.n	80030f0 <__ieee754_pow+0x1f0>
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <__ieee754_pow+0x224>)
 8003106:	429c      	cmp	r4, r3
 8003108:	dd14      	ble.n	8003134 <__ieee754_pow+0x234>
 800310a:	2e00      	cmp	r6, #0
 800310c:	dcf2      	bgt.n	80030f4 <__ieee754_pow+0x1f4>
 800310e:	e777      	b.n	8003000 <__ieee754_pow+0x100>
 8003110:	8800759c 	.word	0x8800759c
 8003114:	7e37e43c 	.word	0x7e37e43c
 8003118:	7ff00000 	.word	0x7ff00000
 800311c:	08003d02 	.word	0x08003d02
 8003120:	433fffff 	.word	0x433fffff
 8003124:	3ff00000 	.word	0x3ff00000
 8003128:	3fefffff 	.word	0x3fefffff
 800312c:	3fe00000 	.word	0x3fe00000
 8003130:	41e00000 	.word	0x41e00000
 8003134:	4661      	mov	r1, ip
 8003136:	2200      	movs	r2, #0
 8003138:	4658      	mov	r0, fp
 800313a:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <__ieee754_pow+0x3c0>)
 800313c:	f7fd f80c 	bl	8000158 <__aeabi_dsub>
 8003140:	a355      	add	r3, pc, #340	; (adr r3, 8003298 <__ieee754_pow+0x398>)
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	4604      	mov	r4, r0
 8003148:	460d      	mov	r5, r1
 800314a:	f7fd f9bd 	bl	80004c8 <__aeabi_dmul>
 800314e:	a354      	add	r3, pc, #336	; (adr r3, 80032a0 <__ieee754_pow+0x3a0>)
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	4606      	mov	r6, r0
 8003156:	460f      	mov	r7, r1
 8003158:	4620      	mov	r0, r4
 800315a:	4629      	mov	r1, r5
 800315c:	f7fd f9b4 	bl	80004c8 <__aeabi_dmul>
 8003160:	2200      	movs	r2, #0
 8003162:	4682      	mov	sl, r0
 8003164:	468b      	mov	fp, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	4b56      	ldr	r3, [pc, #344]	; (80032c4 <__ieee754_pow+0x3c4>)
 800316c:	f7fd f9ac 	bl	80004c8 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	a14c      	add	r1, pc, #304	; (adr r1, 80032a8 <__ieee754_pow+0x3a8>)
 8003176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800317a:	f7fc ffed 	bl	8000158 <__aeabi_dsub>
 800317e:	4622      	mov	r2, r4
 8003180:	462b      	mov	r3, r5
 8003182:	f7fd f9a1 	bl	80004c8 <__aeabi_dmul>
 8003186:	4602      	mov	r2, r0
 8003188:	460b      	mov	r3, r1
 800318a:	2000      	movs	r0, #0
 800318c:	494e      	ldr	r1, [pc, #312]	; (80032c8 <__ieee754_pow+0x3c8>)
 800318e:	f7fc ffe3 	bl	8000158 <__aeabi_dsub>
 8003192:	4622      	mov	r2, r4
 8003194:	462b      	mov	r3, r5
 8003196:	4680      	mov	r8, r0
 8003198:	4689      	mov	r9, r1
 800319a:	4620      	mov	r0, r4
 800319c:	4629      	mov	r1, r5
 800319e:	f7fd f993 	bl	80004c8 <__aeabi_dmul>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4640      	mov	r0, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	f7fd f98d 	bl	80004c8 <__aeabi_dmul>
 80031ae:	a340      	add	r3, pc, #256	; (adr r3, 80032b0 <__ieee754_pow+0x3b0>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd f988 	bl	80004c8 <__aeabi_dmul>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4650      	mov	r0, sl
 80031be:	4659      	mov	r1, fp
 80031c0:	f7fc ffca 	bl	8000158 <__aeabi_dsub>
 80031c4:	f04f 0a00 	mov.w	sl, #0
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4604      	mov	r4, r0
 80031ce:	460d      	mov	r5, r1
 80031d0:	4630      	mov	r0, r6
 80031d2:	4639      	mov	r1, r7
 80031d4:	f7fc ffc2 	bl	800015c <__adddf3>
 80031d8:	4632      	mov	r2, r6
 80031da:	463b      	mov	r3, r7
 80031dc:	4650      	mov	r0, sl
 80031de:	468b      	mov	fp, r1
 80031e0:	f7fc ffba 	bl	8000158 <__aeabi_dsub>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4620      	mov	r0, r4
 80031ea:	4629      	mov	r1, r5
 80031ec:	f7fc ffb4 	bl	8000158 <__aeabi_dsub>
 80031f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80031f4:	9b00      	ldr	r3, [sp, #0]
 80031f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80031f8:	3b01      	subs	r3, #1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f04f 0600 	mov.w	r6, #0
 8003200:	f04f 0200 	mov.w	r2, #0
 8003204:	bf0c      	ite	eq
 8003206:	4b31      	ldreq	r3, [pc, #196]	; (80032cc <__ieee754_pow+0x3cc>)
 8003208:	4b2d      	ldrne	r3, [pc, #180]	; (80032c0 <__ieee754_pow+0x3c0>)
 800320a:	4604      	mov	r4, r0
 800320c:	460d      	mov	r5, r1
 800320e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003212:	e9cd 2300 	strd	r2, r3, [sp]
 8003216:	4632      	mov	r2, r6
 8003218:	463b      	mov	r3, r7
 800321a:	f7fc ff9d 	bl	8000158 <__aeabi_dsub>
 800321e:	4652      	mov	r2, sl
 8003220:	465b      	mov	r3, fp
 8003222:	f7fd f951 	bl	80004c8 <__aeabi_dmul>
 8003226:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800322a:	4680      	mov	r8, r0
 800322c:	4689      	mov	r9, r1
 800322e:	4620      	mov	r0, r4
 8003230:	4629      	mov	r1, r5
 8003232:	f7fd f949 	bl	80004c8 <__aeabi_dmul>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4640      	mov	r0, r8
 800323c:	4649      	mov	r1, r9
 800323e:	f7fc ff8d 	bl	800015c <__adddf3>
 8003242:	4632      	mov	r2, r6
 8003244:	463b      	mov	r3, r7
 8003246:	4680      	mov	r8, r0
 8003248:	4689      	mov	r9, r1
 800324a:	4650      	mov	r0, sl
 800324c:	4659      	mov	r1, fp
 800324e:	f7fd f93b 	bl	80004c8 <__aeabi_dmul>
 8003252:	4604      	mov	r4, r0
 8003254:	460d      	mov	r5, r1
 8003256:	460b      	mov	r3, r1
 8003258:	4602      	mov	r2, r0
 800325a:	4649      	mov	r1, r9
 800325c:	4640      	mov	r0, r8
 800325e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003262:	f7fc ff7b 	bl	800015c <__adddf3>
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <__ieee754_pow+0x3d0>)
 8003268:	4682      	mov	sl, r0
 800326a:	4299      	cmp	r1, r3
 800326c:	460f      	mov	r7, r1
 800326e:	460e      	mov	r6, r1
 8003270:	f340 82ed 	ble.w	800384e <__ieee754_pow+0x94e>
 8003274:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003278:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800327c:	4303      	orrs	r3, r0
 800327e:	f000 81e7 	beq.w	8003650 <__ieee754_pow+0x750>
 8003282:	a30d      	add	r3, pc, #52	; (adr r3, 80032b8 <__ieee754_pow+0x3b8>)
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800328c:	f7fd f91c 	bl	80004c8 <__aeabi_dmul>
 8003290:	a309      	add	r3, pc, #36	; (adr r3, 80032b8 <__ieee754_pow+0x3b8>)
 8003292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003296:	e6cc      	b.n	8003032 <__ieee754_pow+0x132>
 8003298:	60000000 	.word	0x60000000
 800329c:	3ff71547 	.word	0x3ff71547
 80032a0:	f85ddf44 	.word	0xf85ddf44
 80032a4:	3e54ae0b 	.word	0x3e54ae0b
 80032a8:	55555555 	.word	0x55555555
 80032ac:	3fd55555 	.word	0x3fd55555
 80032b0:	652b82fe 	.word	0x652b82fe
 80032b4:	3ff71547 	.word	0x3ff71547
 80032b8:	8800759c 	.word	0x8800759c
 80032bc:	7e37e43c 	.word	0x7e37e43c
 80032c0:	3ff00000 	.word	0x3ff00000
 80032c4:	3fd00000 	.word	0x3fd00000
 80032c8:	3fe00000 	.word	0x3fe00000
 80032cc:	bff00000 	.word	0xbff00000
 80032d0:	408fffff 	.word	0x408fffff
 80032d4:	4bd4      	ldr	r3, [pc, #848]	; (8003628 <__ieee754_pow+0x728>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	ea09 0303 	and.w	r3, r9, r3
 80032dc:	b943      	cbnz	r3, 80032f0 <__ieee754_pow+0x3f0>
 80032de:	4658      	mov	r0, fp
 80032e0:	4661      	mov	r1, ip
 80032e2:	4bd2      	ldr	r3, [pc, #840]	; (800362c <__ieee754_pow+0x72c>)
 80032e4:	f7fd f8f0 	bl	80004c8 <__aeabi_dmul>
 80032e8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80032ec:	4683      	mov	fp, r0
 80032ee:	460c      	mov	r4, r1
 80032f0:	1523      	asrs	r3, r4, #20
 80032f2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80032f6:	4413      	add	r3, r2
 80032f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80032fa:	4bcd      	ldr	r3, [pc, #820]	; (8003630 <__ieee754_pow+0x730>)
 80032fc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003300:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003304:	429c      	cmp	r4, r3
 8003306:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800330a:	dd08      	ble.n	800331e <__ieee754_pow+0x41e>
 800330c:	4bc9      	ldr	r3, [pc, #804]	; (8003634 <__ieee754_pow+0x734>)
 800330e:	429c      	cmp	r4, r3
 8003310:	f340 819c 	ble.w	800364c <__ieee754_pow+0x74c>
 8003314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003316:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800331a:	3301      	adds	r3, #1
 800331c:	930b      	str	r3, [sp, #44]	; 0x2c
 800331e:	2600      	movs	r6, #0
 8003320:	00f3      	lsls	r3, r6, #3
 8003322:	930d      	str	r3, [sp, #52]	; 0x34
 8003324:	4bc4      	ldr	r3, [pc, #784]	; (8003638 <__ieee754_pow+0x738>)
 8003326:	4658      	mov	r0, fp
 8003328:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800332c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003330:	4629      	mov	r1, r5
 8003332:	461a      	mov	r2, r3
 8003334:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8003338:	4623      	mov	r3, r4
 800333a:	f7fc ff0d 	bl	8000158 <__aeabi_dsub>
 800333e:	46da      	mov	sl, fp
 8003340:	462b      	mov	r3, r5
 8003342:	4652      	mov	r2, sl
 8003344:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003348:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800334c:	f7fc ff06 	bl	800015c <__adddf3>
 8003350:	4602      	mov	r2, r0
 8003352:	460b      	mov	r3, r1
 8003354:	2000      	movs	r0, #0
 8003356:	49b9      	ldr	r1, [pc, #740]	; (800363c <__ieee754_pow+0x73c>)
 8003358:	f7fd f9e0 	bl	800071c <__aeabi_ddiv>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003364:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003368:	f7fd f8ae 	bl	80004c8 <__aeabi_dmul>
 800336c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003370:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8003374:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003378:	2300      	movs	r3, #0
 800337a:	2200      	movs	r2, #0
 800337c:	46ab      	mov	fp, r5
 800337e:	106d      	asrs	r5, r5, #1
 8003380:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003384:	9304      	str	r3, [sp, #16]
 8003386:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800338a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800338e:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8003392:	4640      	mov	r0, r8
 8003394:	4649      	mov	r1, r9
 8003396:	4614      	mov	r4, r2
 8003398:	461d      	mov	r5, r3
 800339a:	f7fd f895 	bl	80004c8 <__aeabi_dmul>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80033a6:	f7fc fed7 	bl	8000158 <__aeabi_dsub>
 80033aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80033ae:	4606      	mov	r6, r0
 80033b0:	460f      	mov	r7, r1
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fc fecf 	bl	8000158 <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4650      	mov	r0, sl
 80033c0:	4659      	mov	r1, fp
 80033c2:	f7fc fec9 	bl	8000158 <__aeabi_dsub>
 80033c6:	4642      	mov	r2, r8
 80033c8:	464b      	mov	r3, r9
 80033ca:	f7fd f87d 	bl	80004c8 <__aeabi_dmul>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4630      	mov	r0, r6
 80033d4:	4639      	mov	r1, r7
 80033d6:	f7fc febf 	bl	8000158 <__aeabi_dsub>
 80033da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80033de:	f7fd f873 	bl	80004c8 <__aeabi_dmul>
 80033e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80033e6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80033ea:	4610      	mov	r0, r2
 80033ec:	4619      	mov	r1, r3
 80033ee:	f7fd f86b 	bl	80004c8 <__aeabi_dmul>
 80033f2:	a37b      	add	r3, pc, #492	; (adr r3, 80035e0 <__ieee754_pow+0x6e0>)
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	4604      	mov	r4, r0
 80033fa:	460d      	mov	r5, r1
 80033fc:	f7fd f864 	bl	80004c8 <__aeabi_dmul>
 8003400:	a379      	add	r3, pc, #484	; (adr r3, 80035e8 <__ieee754_pow+0x6e8>)
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f7fc fea9 	bl	800015c <__adddf3>
 800340a:	4622      	mov	r2, r4
 800340c:	462b      	mov	r3, r5
 800340e:	f7fd f85b 	bl	80004c8 <__aeabi_dmul>
 8003412:	a377      	add	r3, pc, #476	; (adr r3, 80035f0 <__ieee754_pow+0x6f0>)
 8003414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003418:	f7fc fea0 	bl	800015c <__adddf3>
 800341c:	4622      	mov	r2, r4
 800341e:	462b      	mov	r3, r5
 8003420:	f7fd f852 	bl	80004c8 <__aeabi_dmul>
 8003424:	a374      	add	r3, pc, #464	; (adr r3, 80035f8 <__ieee754_pow+0x6f8>)
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f7fc fe97 	bl	800015c <__adddf3>
 800342e:	4622      	mov	r2, r4
 8003430:	462b      	mov	r3, r5
 8003432:	f7fd f849 	bl	80004c8 <__aeabi_dmul>
 8003436:	a372      	add	r3, pc, #456	; (adr r3, 8003600 <__ieee754_pow+0x700>)
 8003438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343c:	f7fc fe8e 	bl	800015c <__adddf3>
 8003440:	4622      	mov	r2, r4
 8003442:	462b      	mov	r3, r5
 8003444:	f7fd f840 	bl	80004c8 <__aeabi_dmul>
 8003448:	a36f      	add	r3, pc, #444	; (adr r3, 8003608 <__ieee754_pow+0x708>)
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f7fc fe85 	bl	800015c <__adddf3>
 8003452:	4622      	mov	r2, r4
 8003454:	4606      	mov	r6, r0
 8003456:	460f      	mov	r7, r1
 8003458:	462b      	mov	r3, r5
 800345a:	4620      	mov	r0, r4
 800345c:	4629      	mov	r1, r5
 800345e:	f7fd f833 	bl	80004c8 <__aeabi_dmul>
 8003462:	4602      	mov	r2, r0
 8003464:	460b      	mov	r3, r1
 8003466:	4630      	mov	r0, r6
 8003468:	4639      	mov	r1, r7
 800346a:	f7fd f82d 	bl	80004c8 <__aeabi_dmul>
 800346e:	4604      	mov	r4, r0
 8003470:	460d      	mov	r5, r1
 8003472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003476:	4642      	mov	r2, r8
 8003478:	464b      	mov	r3, r9
 800347a:	f7fc fe6f 	bl	800015c <__adddf3>
 800347e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003482:	f7fd f821 	bl	80004c8 <__aeabi_dmul>
 8003486:	4622      	mov	r2, r4
 8003488:	462b      	mov	r3, r5
 800348a:	f7fc fe67 	bl	800015c <__adddf3>
 800348e:	4642      	mov	r2, r8
 8003490:	4606      	mov	r6, r0
 8003492:	460f      	mov	r7, r1
 8003494:	464b      	mov	r3, r9
 8003496:	4640      	mov	r0, r8
 8003498:	4649      	mov	r1, r9
 800349a:	f7fd f815 	bl	80004c8 <__aeabi_dmul>
 800349e:	2200      	movs	r2, #0
 80034a0:	4b67      	ldr	r3, [pc, #412]	; (8003640 <__ieee754_pow+0x740>)
 80034a2:	4682      	mov	sl, r0
 80034a4:	468b      	mov	fp, r1
 80034a6:	f7fc fe59 	bl	800015c <__adddf3>
 80034aa:	4632      	mov	r2, r6
 80034ac:	463b      	mov	r3, r7
 80034ae:	f7fc fe55 	bl	800015c <__adddf3>
 80034b2:	9c04      	ldr	r4, [sp, #16]
 80034b4:	460d      	mov	r5, r1
 80034b6:	4622      	mov	r2, r4
 80034b8:	460b      	mov	r3, r1
 80034ba:	4640      	mov	r0, r8
 80034bc:	4649      	mov	r1, r9
 80034be:	f7fd f803 	bl	80004c8 <__aeabi_dmul>
 80034c2:	2200      	movs	r2, #0
 80034c4:	4680      	mov	r8, r0
 80034c6:	4689      	mov	r9, r1
 80034c8:	4620      	mov	r0, r4
 80034ca:	4629      	mov	r1, r5
 80034cc:	4b5c      	ldr	r3, [pc, #368]	; (8003640 <__ieee754_pow+0x740>)
 80034ce:	f7fc fe43 	bl	8000158 <__aeabi_dsub>
 80034d2:	4652      	mov	r2, sl
 80034d4:	465b      	mov	r3, fp
 80034d6:	f7fc fe3f 	bl	8000158 <__aeabi_dsub>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4630      	mov	r0, r6
 80034e0:	4639      	mov	r1, r7
 80034e2:	f7fc fe39 	bl	8000158 <__aeabi_dsub>
 80034e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80034ea:	f7fc ffed 	bl	80004c8 <__aeabi_dmul>
 80034ee:	4622      	mov	r2, r4
 80034f0:	4606      	mov	r6, r0
 80034f2:	460f      	mov	r7, r1
 80034f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80034f8:	462b      	mov	r3, r5
 80034fa:	f7fc ffe5 	bl	80004c8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4630      	mov	r0, r6
 8003504:	4639      	mov	r1, r7
 8003506:	f7fc fe29 	bl	800015c <__adddf3>
 800350a:	4606      	mov	r6, r0
 800350c:	460f      	mov	r7, r1
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4640      	mov	r0, r8
 8003514:	4649      	mov	r1, r9
 8003516:	f7fc fe21 	bl	800015c <__adddf3>
 800351a:	a33d      	add	r3, pc, #244	; (adr r3, 8003610 <__ieee754_pow+0x710>)
 800351c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003520:	9c04      	ldr	r4, [sp, #16]
 8003522:	460d      	mov	r5, r1
 8003524:	4620      	mov	r0, r4
 8003526:	f7fc ffcf 	bl	80004c8 <__aeabi_dmul>
 800352a:	4642      	mov	r2, r8
 800352c:	464b      	mov	r3, r9
 800352e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fc fe0f 	bl	8000158 <__aeabi_dsub>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4630      	mov	r0, r6
 8003540:	4639      	mov	r1, r7
 8003542:	f7fc fe09 	bl	8000158 <__aeabi_dsub>
 8003546:	a334      	add	r3, pc, #208	; (adr r3, 8003618 <__ieee754_pow+0x718>)
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	f7fc ffbc 	bl	80004c8 <__aeabi_dmul>
 8003550:	a333      	add	r3, pc, #204	; (adr r3, 8003620 <__ieee754_pow+0x720>)
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	4606      	mov	r6, r0
 8003558:	460f      	mov	r7, r1
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fc ffb3 	bl	80004c8 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4630      	mov	r0, r6
 8003568:	4639      	mov	r1, r7
 800356a:	f7fc fdf7 	bl	800015c <__adddf3>
 800356e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <__ieee754_pow+0x744>)
 8003572:	4413      	add	r3, r2
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fc fdf0 	bl	800015c <__adddf3>
 800357c:	4680      	mov	r8, r0
 800357e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003580:	4689      	mov	r9, r1
 8003582:	f7fc ff37 	bl	80003f4 <__aeabi_i2d>
 8003586:	4604      	mov	r4, r0
 8003588:	460d      	mov	r5, r1
 800358a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800358c:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <__ieee754_pow+0x748>)
 800358e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003592:	4413      	add	r3, r2
 8003594:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003598:	4642      	mov	r2, r8
 800359a:	464b      	mov	r3, r9
 800359c:	f7fc fdde 	bl	800015c <__adddf3>
 80035a0:	4632      	mov	r2, r6
 80035a2:	463b      	mov	r3, r7
 80035a4:	f7fc fdda 	bl	800015c <__adddf3>
 80035a8:	4622      	mov	r2, r4
 80035aa:	462b      	mov	r3, r5
 80035ac:	f7fc fdd6 	bl	800015c <__adddf3>
 80035b0:	f8dd a010 	ldr.w	sl, [sp, #16]
 80035b4:	4622      	mov	r2, r4
 80035b6:	462b      	mov	r3, r5
 80035b8:	4650      	mov	r0, sl
 80035ba:	468b      	mov	fp, r1
 80035bc:	f7fc fdcc 	bl	8000158 <__aeabi_dsub>
 80035c0:	4632      	mov	r2, r6
 80035c2:	463b      	mov	r3, r7
 80035c4:	f7fc fdc8 	bl	8000158 <__aeabi_dsub>
 80035c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80035cc:	f7fc fdc4 	bl	8000158 <__aeabi_dsub>
 80035d0:	4602      	mov	r2, r0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4640      	mov	r0, r8
 80035d6:	4649      	mov	r1, r9
 80035d8:	e608      	b.n	80031ec <__ieee754_pow+0x2ec>
 80035da:	bf00      	nop
 80035dc:	f3af 8000 	nop.w
 80035e0:	4a454eef 	.word	0x4a454eef
 80035e4:	3fca7e28 	.word	0x3fca7e28
 80035e8:	93c9db65 	.word	0x93c9db65
 80035ec:	3fcd864a 	.word	0x3fcd864a
 80035f0:	a91d4101 	.word	0xa91d4101
 80035f4:	3fd17460 	.word	0x3fd17460
 80035f8:	518f264d 	.word	0x518f264d
 80035fc:	3fd55555 	.word	0x3fd55555
 8003600:	db6fabff 	.word	0xdb6fabff
 8003604:	3fdb6db6 	.word	0x3fdb6db6
 8003608:	33333303 	.word	0x33333303
 800360c:	3fe33333 	.word	0x3fe33333
 8003610:	e0000000 	.word	0xe0000000
 8003614:	3feec709 	.word	0x3feec709
 8003618:	dc3a03fd 	.word	0xdc3a03fd
 800361c:	3feec709 	.word	0x3feec709
 8003620:	145b01f5 	.word	0x145b01f5
 8003624:	be3e2fe0 	.word	0xbe3e2fe0
 8003628:	7ff00000 	.word	0x7ff00000
 800362c:	43400000 	.word	0x43400000
 8003630:	0003988e 	.word	0x0003988e
 8003634:	000bb679 	.word	0x000bb679
 8003638:	08003d08 	.word	0x08003d08
 800363c:	3ff00000 	.word	0x3ff00000
 8003640:	40080000 	.word	0x40080000
 8003644:	08003d28 	.word	0x08003d28
 8003648:	08003d18 	.word	0x08003d18
 800364c:	2601      	movs	r6, #1
 800364e:	e667      	b.n	8003320 <__ieee754_pow+0x420>
 8003650:	a39d      	add	r3, pc, #628	; (adr r3, 80038c8 <__ieee754_pow+0x9c8>)
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	4640      	mov	r0, r8
 8003658:	4649      	mov	r1, r9
 800365a:	f7fc fd7f 	bl	800015c <__adddf3>
 800365e:	4622      	mov	r2, r4
 8003660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003664:	462b      	mov	r3, r5
 8003666:	4650      	mov	r0, sl
 8003668:	4639      	mov	r1, r7
 800366a:	f7fc fd75 	bl	8000158 <__aeabi_dsub>
 800366e:	4602      	mov	r2, r0
 8003670:	460b      	mov	r3, r1
 8003672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003676:	f7fd f9b7 	bl	80009e8 <__aeabi_dcmpgt>
 800367a:	2800      	cmp	r0, #0
 800367c:	f47f ae01 	bne.w	8003282 <__ieee754_pow+0x382>
 8003680:	4aa5      	ldr	r2, [pc, #660]	; (8003918 <__ieee754_pow+0xa18>)
 8003682:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8003686:	4293      	cmp	r3, r2
 8003688:	f340 8103 	ble.w	8003892 <__ieee754_pow+0x992>
 800368c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8003690:	2000      	movs	r0, #0
 8003692:	151b      	asrs	r3, r3, #20
 8003694:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003698:	fa4a f303 	asr.w	r3, sl, r3
 800369c:	4433      	add	r3, r6
 800369e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80036a2:	4f9e      	ldr	r7, [pc, #632]	; (800391c <__ieee754_pow+0xa1c>)
 80036a4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80036a8:	4117      	asrs	r7, r2
 80036aa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80036ae:	ea23 0107 	bic.w	r1, r3, r7
 80036b2:	f1c2 0214 	rsb	r2, r2, #20
 80036b6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80036ba:	460b      	mov	r3, r1
 80036bc:	fa4a fa02 	asr.w	sl, sl, r2
 80036c0:	2e00      	cmp	r6, #0
 80036c2:	4602      	mov	r2, r0
 80036c4:	4629      	mov	r1, r5
 80036c6:	4620      	mov	r0, r4
 80036c8:	bfb8      	it	lt
 80036ca:	f1ca 0a00 	rsblt	sl, sl, #0
 80036ce:	f7fc fd43 	bl	8000158 <__aeabi_dsub>
 80036d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80036d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80036da:	2400      	movs	r4, #0
 80036dc:	4642      	mov	r2, r8
 80036de:	464b      	mov	r3, r9
 80036e0:	f7fc fd3c 	bl	800015c <__adddf3>
 80036e4:	a37a      	add	r3, pc, #488	; (adr r3, 80038d0 <__ieee754_pow+0x9d0>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	4620      	mov	r0, r4
 80036ec:	460d      	mov	r5, r1
 80036ee:	f7fc feeb 	bl	80004c8 <__aeabi_dmul>
 80036f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80036f6:	4606      	mov	r6, r0
 80036f8:	460f      	mov	r7, r1
 80036fa:	4620      	mov	r0, r4
 80036fc:	4629      	mov	r1, r5
 80036fe:	f7fc fd2b 	bl	8000158 <__aeabi_dsub>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4640      	mov	r0, r8
 8003708:	4649      	mov	r1, r9
 800370a:	f7fc fd25 	bl	8000158 <__aeabi_dsub>
 800370e:	a372      	add	r3, pc, #456	; (adr r3, 80038d8 <__ieee754_pow+0x9d8>)
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	f7fc fed8 	bl	80004c8 <__aeabi_dmul>
 8003718:	a371      	add	r3, pc, #452	; (adr r3, 80038e0 <__ieee754_pow+0x9e0>)
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	4680      	mov	r8, r0
 8003720:	4689      	mov	r9, r1
 8003722:	4620      	mov	r0, r4
 8003724:	4629      	mov	r1, r5
 8003726:	f7fc fecf 	bl	80004c8 <__aeabi_dmul>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4640      	mov	r0, r8
 8003730:	4649      	mov	r1, r9
 8003732:	f7fc fd13 	bl	800015c <__adddf3>
 8003736:	4604      	mov	r4, r0
 8003738:	460d      	mov	r5, r1
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	4630      	mov	r0, r6
 8003740:	4639      	mov	r1, r7
 8003742:	f7fc fd0b 	bl	800015c <__adddf3>
 8003746:	4632      	mov	r2, r6
 8003748:	463b      	mov	r3, r7
 800374a:	4680      	mov	r8, r0
 800374c:	4689      	mov	r9, r1
 800374e:	f7fc fd03 	bl	8000158 <__aeabi_dsub>
 8003752:	4602      	mov	r2, r0
 8003754:	460b      	mov	r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f7fc fcfd 	bl	8000158 <__aeabi_dsub>
 800375e:	4642      	mov	r2, r8
 8003760:	4606      	mov	r6, r0
 8003762:	460f      	mov	r7, r1
 8003764:	464b      	mov	r3, r9
 8003766:	4640      	mov	r0, r8
 8003768:	4649      	mov	r1, r9
 800376a:	f7fc fead 	bl	80004c8 <__aeabi_dmul>
 800376e:	a35e      	add	r3, pc, #376	; (adr r3, 80038e8 <__ieee754_pow+0x9e8>)
 8003770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003774:	4604      	mov	r4, r0
 8003776:	460d      	mov	r5, r1
 8003778:	f7fc fea6 	bl	80004c8 <__aeabi_dmul>
 800377c:	a35c      	add	r3, pc, #368	; (adr r3, 80038f0 <__ieee754_pow+0x9f0>)
 800377e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003782:	f7fc fce9 	bl	8000158 <__aeabi_dsub>
 8003786:	4622      	mov	r2, r4
 8003788:	462b      	mov	r3, r5
 800378a:	f7fc fe9d 	bl	80004c8 <__aeabi_dmul>
 800378e:	a35a      	add	r3, pc, #360	; (adr r3, 80038f8 <__ieee754_pow+0x9f8>)
 8003790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003794:	f7fc fce2 	bl	800015c <__adddf3>
 8003798:	4622      	mov	r2, r4
 800379a:	462b      	mov	r3, r5
 800379c:	f7fc fe94 	bl	80004c8 <__aeabi_dmul>
 80037a0:	a357      	add	r3, pc, #348	; (adr r3, 8003900 <__ieee754_pow+0xa00>)
 80037a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a6:	f7fc fcd7 	bl	8000158 <__aeabi_dsub>
 80037aa:	4622      	mov	r2, r4
 80037ac:	462b      	mov	r3, r5
 80037ae:	f7fc fe8b 	bl	80004c8 <__aeabi_dmul>
 80037b2:	a355      	add	r3, pc, #340	; (adr r3, 8003908 <__ieee754_pow+0xa08>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc fcd0 	bl	800015c <__adddf3>
 80037bc:	4622      	mov	r2, r4
 80037be:	462b      	mov	r3, r5
 80037c0:	f7fc fe82 	bl	80004c8 <__aeabi_dmul>
 80037c4:	4602      	mov	r2, r0
 80037c6:	460b      	mov	r3, r1
 80037c8:	4640      	mov	r0, r8
 80037ca:	4649      	mov	r1, r9
 80037cc:	f7fc fcc4 	bl	8000158 <__aeabi_dsub>
 80037d0:	4604      	mov	r4, r0
 80037d2:	460d      	mov	r5, r1
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4640      	mov	r0, r8
 80037da:	4649      	mov	r1, r9
 80037dc:	f7fc fe74 	bl	80004c8 <__aeabi_dmul>
 80037e0:	2200      	movs	r2, #0
 80037e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80037e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80037ea:	4620      	mov	r0, r4
 80037ec:	4629      	mov	r1, r5
 80037ee:	f7fc fcb3 	bl	8000158 <__aeabi_dsub>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80037fa:	f7fc ff8f 	bl	800071c <__aeabi_ddiv>
 80037fe:	4632      	mov	r2, r6
 8003800:	4604      	mov	r4, r0
 8003802:	460d      	mov	r5, r1
 8003804:	463b      	mov	r3, r7
 8003806:	4640      	mov	r0, r8
 8003808:	4649      	mov	r1, r9
 800380a:	f7fc fe5d 	bl	80004c8 <__aeabi_dmul>
 800380e:	4632      	mov	r2, r6
 8003810:	463b      	mov	r3, r7
 8003812:	f7fc fca3 	bl	800015c <__adddf3>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4620      	mov	r0, r4
 800381c:	4629      	mov	r1, r5
 800381e:	f7fc fc9b 	bl	8000158 <__aeabi_dsub>
 8003822:	4642      	mov	r2, r8
 8003824:	464b      	mov	r3, r9
 8003826:	f7fc fc97 	bl	8000158 <__aeabi_dsub>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	2000      	movs	r0, #0
 8003830:	493b      	ldr	r1, [pc, #236]	; (8003920 <__ieee754_pow+0xa20>)
 8003832:	f7fc fc91 	bl	8000158 <__aeabi_dsub>
 8003836:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800383a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800383e:	da2b      	bge.n	8003898 <__ieee754_pow+0x998>
 8003840:	4652      	mov	r2, sl
 8003842:	f000 f9b9 	bl	8003bb8 <scalbn>
 8003846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800384a:	f7ff bbf2 	b.w	8003032 <__ieee754_pow+0x132>
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <__ieee754_pow+0xa24>)
 8003850:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8003854:	429f      	cmp	r7, r3
 8003856:	f77f af13 	ble.w	8003680 <__ieee754_pow+0x780>
 800385a:	4b33      	ldr	r3, [pc, #204]	; (8003928 <__ieee754_pow+0xa28>)
 800385c:	440b      	add	r3, r1
 800385e:	4303      	orrs	r3, r0
 8003860:	d00b      	beq.n	800387a <__ieee754_pow+0x97a>
 8003862:	a32b      	add	r3, pc, #172	; (adr r3, 8003910 <__ieee754_pow+0xa10>)
 8003864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003868:	e9dd 0100 	ldrd	r0, r1, [sp]
 800386c:	f7fc fe2c 	bl	80004c8 <__aeabi_dmul>
 8003870:	a327      	add	r3, pc, #156	; (adr r3, 8003910 <__ieee754_pow+0xa10>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7ff bbdc 	b.w	8003032 <__ieee754_pow+0x132>
 800387a:	4622      	mov	r2, r4
 800387c:	462b      	mov	r3, r5
 800387e:	f7fc fc6b 	bl	8000158 <__aeabi_dsub>
 8003882:	4642      	mov	r2, r8
 8003884:	464b      	mov	r3, r9
 8003886:	f7fd f8a5 	bl	80009d4 <__aeabi_dcmpge>
 800388a:	2800      	cmp	r0, #0
 800388c:	f43f aef8 	beq.w	8003680 <__ieee754_pow+0x780>
 8003890:	e7e7      	b.n	8003862 <__ieee754_pow+0x962>
 8003892:	f04f 0a00 	mov.w	sl, #0
 8003896:	e71e      	b.n	80036d6 <__ieee754_pow+0x7d6>
 8003898:	4621      	mov	r1, r4
 800389a:	e7d4      	b.n	8003846 <__ieee754_pow+0x946>
 800389c:	f04f 0b00 	mov.w	fp, #0
 80038a0:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8003920 <__ieee754_pow+0xa20>
 80038a4:	f7ff bbb0 	b.w	8003008 <__ieee754_pow+0x108>
 80038a8:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 80038ac:	f7ff bbac 	b.w	8003008 <__ieee754_pow+0x108>
 80038b0:	4638      	mov	r0, r7
 80038b2:	4641      	mov	r1, r8
 80038b4:	f7ff bbbf 	b.w	8003036 <__ieee754_pow+0x136>
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	f7ff bb7f 	b.w	8002fbc <__ieee754_pow+0xbc>
 80038be:	2300      	movs	r3, #0
 80038c0:	f7ff bb69 	b.w	8002f96 <__ieee754_pow+0x96>
 80038c4:	f3af 8000 	nop.w
 80038c8:	652b82fe 	.word	0x652b82fe
 80038cc:	3c971547 	.word	0x3c971547
 80038d0:	00000000 	.word	0x00000000
 80038d4:	3fe62e43 	.word	0x3fe62e43
 80038d8:	fefa39ef 	.word	0xfefa39ef
 80038dc:	3fe62e42 	.word	0x3fe62e42
 80038e0:	0ca86c39 	.word	0x0ca86c39
 80038e4:	be205c61 	.word	0xbe205c61
 80038e8:	72bea4d0 	.word	0x72bea4d0
 80038ec:	3e663769 	.word	0x3e663769
 80038f0:	c5d26bf1 	.word	0xc5d26bf1
 80038f4:	3ebbbd41 	.word	0x3ebbbd41
 80038f8:	af25de2c 	.word	0xaf25de2c
 80038fc:	3f11566a 	.word	0x3f11566a
 8003900:	16bebd93 	.word	0x16bebd93
 8003904:	3f66c16c 	.word	0x3f66c16c
 8003908:	5555553e 	.word	0x5555553e
 800390c:	3fc55555 	.word	0x3fc55555
 8003910:	c2f8f359 	.word	0xc2f8f359
 8003914:	01a56e1f 	.word	0x01a56e1f
 8003918:	3fe00000 	.word	0x3fe00000
 800391c:	000fffff 	.word	0x000fffff
 8003920:	3ff00000 	.word	0x3ff00000
 8003924:	4090cbff 	.word	0x4090cbff
 8003928:	3f6f3400 	.word	0x3f6f3400

0800392c <__ieee754_sqrt>:
 800392c:	f8df c150 	ldr.w	ip, [pc, #336]	; 8003a80 <__ieee754_sqrt+0x154>
 8003930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003934:	ea3c 0c01 	bics.w	ip, ip, r1
 8003938:	460b      	mov	r3, r1
 800393a:	4606      	mov	r6, r0
 800393c:	460d      	mov	r5, r1
 800393e:	460a      	mov	r2, r1
 8003940:	4607      	mov	r7, r0
 8003942:	4604      	mov	r4, r0
 8003944:	d10e      	bne.n	8003964 <__ieee754_sqrt+0x38>
 8003946:	4602      	mov	r2, r0
 8003948:	f7fc fdbe 	bl	80004c8 <__aeabi_dmul>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4630      	mov	r0, r6
 8003952:	4629      	mov	r1, r5
 8003954:	f7fc fc02 	bl	800015c <__adddf3>
 8003958:	4606      	mov	r6, r0
 800395a:	460d      	mov	r5, r1
 800395c:	4630      	mov	r0, r6
 800395e:	4629      	mov	r1, r5
 8003960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003964:	2900      	cmp	r1, #0
 8003966:	dc0d      	bgt.n	8003984 <__ieee754_sqrt+0x58>
 8003968:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800396c:	ea5c 0707 	orrs.w	r7, ip, r7
 8003970:	d0f4      	beq.n	800395c <__ieee754_sqrt+0x30>
 8003972:	b139      	cbz	r1, 8003984 <__ieee754_sqrt+0x58>
 8003974:	4602      	mov	r2, r0
 8003976:	f7fc fbef 	bl	8000158 <__aeabi_dsub>
 800397a:	4602      	mov	r2, r0
 800397c:	460b      	mov	r3, r1
 800397e:	f7fc fecd 	bl	800071c <__aeabi_ddiv>
 8003982:	e7e9      	b.n	8003958 <__ieee754_sqrt+0x2c>
 8003984:	1512      	asrs	r2, r2, #20
 8003986:	d074      	beq.n	8003a72 <__ieee754_sqrt+0x146>
 8003988:	2000      	movs	r0, #0
 800398a:	07d5      	lsls	r5, r2, #31
 800398c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003990:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8003994:	bf5e      	ittt	pl
 8003996:	0fe3      	lsrpl	r3, r4, #31
 8003998:	0064      	lslpl	r4, r4, #1
 800399a:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 800399e:	0fe3      	lsrs	r3, r4, #31
 80039a0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80039a4:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80039a8:	2516      	movs	r5, #22
 80039aa:	4601      	mov	r1, r0
 80039ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80039b0:	1076      	asrs	r6, r6, #1
 80039b2:	0064      	lsls	r4, r4, #1
 80039b4:	188f      	adds	r7, r1, r2
 80039b6:	429f      	cmp	r7, r3
 80039b8:	bfde      	ittt	le
 80039ba:	1bdb      	suble	r3, r3, r7
 80039bc:	18b9      	addle	r1, r7, r2
 80039be:	1880      	addle	r0, r0, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	3d01      	subs	r5, #1
 80039c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80039c8:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80039cc:	ea4f 0444 	mov.w	r4, r4, lsl #1
 80039d0:	d1f0      	bne.n	80039b4 <__ieee754_sqrt+0x88>
 80039d2:	462a      	mov	r2, r5
 80039d4:	f04f 0e20 	mov.w	lr, #32
 80039d8:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 80039dc:	428b      	cmp	r3, r1
 80039de:	eb07 0c05 	add.w	ip, r7, r5
 80039e2:	dc02      	bgt.n	80039ea <__ieee754_sqrt+0xbe>
 80039e4:	d113      	bne.n	8003a0e <__ieee754_sqrt+0xe2>
 80039e6:	45a4      	cmp	ip, r4
 80039e8:	d811      	bhi.n	8003a0e <__ieee754_sqrt+0xe2>
 80039ea:	f1bc 0f00 	cmp.w	ip, #0
 80039ee:	eb0c 0507 	add.w	r5, ip, r7
 80039f2:	da43      	bge.n	8003a7c <__ieee754_sqrt+0x150>
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	db41      	blt.n	8003a7c <__ieee754_sqrt+0x150>
 80039f8:	f101 0801 	add.w	r8, r1, #1
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	4641      	mov	r1, r8
 8003a00:	45a4      	cmp	ip, r4
 8003a02:	bf88      	it	hi
 8003a04:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003a08:	eba4 040c 	sub.w	r4, r4, ip
 8003a0c:	443a      	add	r2, r7
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	f1be 0e01 	subs.w	lr, lr, #1
 8003a14:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8003a18:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8003a1c:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8003a20:	d1dc      	bne.n	80039dc <__ieee754_sqrt+0xb0>
 8003a22:	4323      	orrs	r3, r4
 8003a24:	d006      	beq.n	8003a34 <__ieee754_sqrt+0x108>
 8003a26:	1c54      	adds	r4, r2, #1
 8003a28:	bf0b      	itete	eq
 8003a2a:	4672      	moveq	r2, lr
 8003a2c:	3201      	addne	r2, #1
 8003a2e:	3001      	addeq	r0, #1
 8003a30:	f022 0201 	bicne.w	r2, r2, #1
 8003a34:	1043      	asrs	r3, r0, #1
 8003a36:	07c1      	lsls	r1, r0, #31
 8003a38:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003a3c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003a40:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8003a44:	bf48      	it	mi
 8003a46:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8003a50:	e782      	b.n	8003958 <__ieee754_sqrt+0x2c>
 8003a52:	0ae3      	lsrs	r3, r4, #11
 8003a54:	3915      	subs	r1, #21
 8003a56:	0564      	lsls	r4, r4, #21
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0fa      	beq.n	8003a52 <__ieee754_sqrt+0x126>
 8003a5c:	02de      	lsls	r6, r3, #11
 8003a5e:	d50a      	bpl.n	8003a76 <__ieee754_sqrt+0x14a>
 8003a60:	f1c2 0020 	rsb	r0, r2, #32
 8003a64:	fa24 f000 	lsr.w	r0, r4, r0
 8003a68:	1e55      	subs	r5, r2, #1
 8003a6a:	4094      	lsls	r4, r2
 8003a6c:	4303      	orrs	r3, r0
 8003a6e:	1b4a      	subs	r2, r1, r5
 8003a70:	e78a      	b.n	8003988 <__ieee754_sqrt+0x5c>
 8003a72:	4611      	mov	r1, r2
 8003a74:	e7f0      	b.n	8003a58 <__ieee754_sqrt+0x12c>
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	3201      	adds	r2, #1
 8003a7a:	e7ef      	b.n	8003a5c <__ieee754_sqrt+0x130>
 8003a7c:	4688      	mov	r8, r1
 8003a7e:	e7bd      	b.n	80039fc <__ieee754_sqrt+0xd0>
 8003a80:	7ff00000 	.word	0x7ff00000

08003a84 <fabs>:
 8003a84:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003a88:	4770      	bx	lr

08003a8a <finite>:
 8003a8a:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8003a8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8003a92:	0fc0      	lsrs	r0, r0, #31
 8003a94:	4770      	bx	lr
	...

08003a98 <nan>:
 8003a98:	2000      	movs	r0, #0
 8003a9a:	4901      	ldr	r1, [pc, #4]	; (8003aa0 <nan+0x8>)
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	7ff80000 	.word	0x7ff80000

08003aa4 <rint>:
 8003aa4:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8003aa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aaa:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8003aae:	2f13      	cmp	r7, #19
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	460b      	mov	r3, r1
 8003ab4:	460c      	mov	r4, r1
 8003ab6:	4605      	mov	r5, r0
 8003ab8:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8003abc:	dc59      	bgt.n	8003b72 <rint+0xce>
 8003abe:	2f00      	cmp	r7, #0
 8003ac0:	da2a      	bge.n	8003b18 <rint+0x74>
 8003ac2:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003ac6:	4301      	orrs	r1, r0
 8003ac8:	d022      	beq.n	8003b10 <rint+0x6c>
 8003aca:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8003ace:	4301      	orrs	r1, r0
 8003ad0:	424d      	negs	r5, r1
 8003ad2:	430d      	orrs	r5, r1
 8003ad4:	4936      	ldr	r1, [pc, #216]	; (8003bb0 <rint+0x10c>)
 8003ad6:	0c5c      	lsrs	r4, r3, #17
 8003ad8:	0b2d      	lsrs	r5, r5, #12
 8003ada:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8003ade:	0464      	lsls	r4, r4, #17
 8003ae0:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8003ae4:	ea45 0304 	orr.w	r3, r5, r4
 8003ae8:	e9d1 4500 	ldrd	r4, r5, [r1]
 8003aec:	4620      	mov	r0, r4
 8003aee:	4629      	mov	r1, r5
 8003af0:	f7fc fb34 	bl	800015c <__adddf3>
 8003af4:	e9cd 0100 	strd	r0, r1, [sp]
 8003af8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003afc:	462b      	mov	r3, r5
 8003afe:	4622      	mov	r2, r4
 8003b00:	f7fc fb2a 	bl	8000158 <__aeabi_dsub>
 8003b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003b08:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4610      	mov	r0, r2
 8003b12:	4619      	mov	r1, r3
 8003b14:	b003      	add	sp, #12
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b18:	4926      	ldr	r1, [pc, #152]	; (8003bb4 <rint+0x110>)
 8003b1a:	4139      	asrs	r1, r7
 8003b1c:	ea03 0001 	and.w	r0, r3, r1
 8003b20:	4310      	orrs	r0, r2
 8003b22:	d0f5      	beq.n	8003b10 <rint+0x6c>
 8003b24:	084b      	lsrs	r3, r1, #1
 8003b26:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8003b2a:	ea52 0501 	orrs.w	r5, r2, r1
 8003b2e:	d00c      	beq.n	8003b4a <rint+0xa6>
 8003b30:	ea24 0303 	bic.w	r3, r4, r3
 8003b34:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8003b38:	2f13      	cmp	r7, #19
 8003b3a:	bf0c      	ite	eq
 8003b3c:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8003b40:	2500      	movne	r5, #0
 8003b42:	fa44 f707 	asr.w	r7, r4, r7
 8003b46:	ea43 0407 	orr.w	r4, r3, r7
 8003b4a:	4919      	ldr	r1, [pc, #100]	; (8003bb0 <rint+0x10c>)
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8003b52:	462a      	mov	r2, r5
 8003b54:	e9d6 4500 	ldrd	r4, r5, [r6]
 8003b58:	4620      	mov	r0, r4
 8003b5a:	4629      	mov	r1, r5
 8003b5c:	f7fc fafe 	bl	800015c <__adddf3>
 8003b60:	e9cd 0100 	strd	r0, r1, [sp]
 8003b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b68:	4622      	mov	r2, r4
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	f7fc faf4 	bl	8000158 <__aeabi_dsub>
 8003b70:	e7cc      	b.n	8003b0c <rint+0x68>
 8003b72:	2f33      	cmp	r7, #51	; 0x33
 8003b74:	dd05      	ble.n	8003b82 <rint+0xde>
 8003b76:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003b7a:	d1c9      	bne.n	8003b10 <rint+0x6c>
 8003b7c:	f7fc faee 	bl	800015c <__adddf3>
 8003b80:	e7c4      	b.n	8003b0c <rint+0x68>
 8003b82:	f04f 31ff 	mov.w	r1, #4294967295
 8003b86:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8003b8a:	fa21 f10c 	lsr.w	r1, r1, ip
 8003b8e:	4208      	tst	r0, r1
 8003b90:	d0be      	beq.n	8003b10 <rint+0x6c>
 8003b92:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8003b96:	bf18      	it	ne
 8003b98:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8003b9c:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8003ba0:	bf1e      	ittt	ne
 8003ba2:	ea20 0303 	bicne.w	r3, r0, r3
 8003ba6:	fa45 fc0c 	asrne.w	ip, r5, ip
 8003baa:	ea43 050c 	orrne.w	r5, r3, ip
 8003bae:	e7cc      	b.n	8003b4a <rint+0xa6>
 8003bb0:	08003d38 	.word	0x08003d38
 8003bb4:	000fffff 	.word	0x000fffff

08003bb8 <scalbn>:
 8003bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bba:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003bbe:	4604      	mov	r4, r0
 8003bc0:	460d      	mov	r5, r1
 8003bc2:	4617      	mov	r7, r2
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	b996      	cbnz	r6, 8003bee <scalbn+0x36>
 8003bc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003bcc:	4303      	orrs	r3, r0
 8003bce:	d039      	beq.n	8003c44 <scalbn+0x8c>
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <scalbn+0xf0>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f7fc fc78 	bl	80004c8 <__aeabi_dmul>
 8003bd8:	4b34      	ldr	r3, [pc, #208]	; (8003cac <scalbn+0xf4>)
 8003bda:	4604      	mov	r4, r0
 8003bdc:	429f      	cmp	r7, r3
 8003bde:	460d      	mov	r5, r1
 8003be0:	da0f      	bge.n	8003c02 <scalbn+0x4a>
 8003be2:	a32d      	add	r3, pc, #180	; (adr r3, 8003c98 <scalbn+0xe0>)
 8003be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be8:	f7fc fc6e 	bl	80004c8 <__aeabi_dmul>
 8003bec:	e006      	b.n	8003bfc <scalbn+0x44>
 8003bee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003bf2:	4296      	cmp	r6, r2
 8003bf4:	d10a      	bne.n	8003c0c <scalbn+0x54>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	f7fc fab0 	bl	800015c <__adddf3>
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	460d      	mov	r5, r1
 8003c00:	e020      	b.n	8003c44 <scalbn+0x8c>
 8003c02:	460b      	mov	r3, r1
 8003c04:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003c08:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8003c0c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003c10:	19b9      	adds	r1, r7, r6
 8003c12:	4291      	cmp	r1, r2
 8003c14:	dd0e      	ble.n	8003c34 <scalbn+0x7c>
 8003c16:	a322      	add	r3, pc, #136	; (adr r3, 8003ca0 <scalbn+0xe8>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8003c20:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8003c24:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8003c28:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8003c2c:	4820      	ldr	r0, [pc, #128]	; (8003cb0 <scalbn+0xf8>)
 8003c2e:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8003c32:	e7d9      	b.n	8003be8 <scalbn+0x30>
 8003c34:	2900      	cmp	r1, #0
 8003c36:	dd08      	ble.n	8003c4a <scalbn+0x92>
 8003c38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003c44:	4620      	mov	r0, r4
 8003c46:	4629      	mov	r1, r5
 8003c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c4a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8003c4e:	da16      	bge.n	8003c7e <scalbn+0xc6>
 8003c50:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003c54:	429f      	cmp	r7, r3
 8003c56:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8003c5a:	dd08      	ble.n	8003c6e <scalbn+0xb6>
 8003c5c:	4c15      	ldr	r4, [pc, #84]	; (8003cb4 <scalbn+0xfc>)
 8003c5e:	4814      	ldr	r0, [pc, #80]	; (8003cb0 <scalbn+0xf8>)
 8003c60:	f363 74df 	bfi	r4, r3, #31, #1
 8003c64:	a30e      	add	r3, pc, #56	; (adr r3, 8003ca0 <scalbn+0xe8>)
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	e7bc      	b.n	8003be8 <scalbn+0x30>
 8003c6e:	4c12      	ldr	r4, [pc, #72]	; (8003cb8 <scalbn+0x100>)
 8003c70:	4812      	ldr	r0, [pc, #72]	; (8003cbc <scalbn+0x104>)
 8003c72:	f363 74df 	bfi	r4, r3, #31, #1
 8003c76:	a308      	add	r3, pc, #32	; (adr r3, 8003c98 <scalbn+0xe0>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	e7f5      	b.n	8003c6a <scalbn+0xb2>
 8003c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8003c82:	3136      	adds	r1, #54	; 0x36
 8003c84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003c88:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	4629      	mov	r1, r5
 8003c90:	2200      	movs	r2, #0
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <scalbn+0x108>)
 8003c94:	e7a8      	b.n	8003be8 <scalbn+0x30>
 8003c96:	bf00      	nop
 8003c98:	c2f8f359 	.word	0xc2f8f359
 8003c9c:	01a56e1f 	.word	0x01a56e1f
 8003ca0:	8800759c 	.word	0x8800759c
 8003ca4:	7e37e43c 	.word	0x7e37e43c
 8003ca8:	43500000 	.word	0x43500000
 8003cac:	ffff3cb0 	.word	0xffff3cb0
 8003cb0:	8800759c 	.word	0x8800759c
 8003cb4:	7e37e43c 	.word	0x7e37e43c
 8003cb8:	01a56e1f 	.word	0x01a56e1f
 8003cbc:	c2f8f359 	.word	0xc2f8f359
 8003cc0:	3c900000 	.word	0x3c900000

08003cc4 <_init>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr

08003cd0 <_fini>:
 8003cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd2:	bf00      	nop
 8003cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cd6:	bc08      	pop	{r3}
 8003cd8:	469e      	mov	lr, r3
 8003cda:	4770      	bx	lr
